// Code generated by http://github.com/gojuno/minimock (v3.4.3). DO NOT EDIT.

package client

import (
	"crypto/tls"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"google.golang.org/grpc/credentials"
)

// TLSProviderMock implements TLSProvider
type TLSProviderMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcNewServerTLSFromFile          func(certFile string, keyFile string) (t1 credentials.TransportCredentials, err error)
	funcNewServerTLSFromFileOrigin    string
	inspectFuncNewServerTLSFromFile   func(certFile string, keyFile string)
	afterNewServerTLSFromFileCounter  uint64
	beforeNewServerTLSFromFileCounter uint64
	NewServerTLSFromFileMock          mTLSProviderMockNewServerTLSFromFile

	funcNewTLS          func(config *tls.Config) (t1 credentials.TransportCredentials)
	funcNewTLSOrigin    string
	inspectFuncNewTLS   func(config *tls.Config)
	afterNewTLSCounter  uint64
	beforeNewTLSCounter uint64
	NewTLSMock          mTLSProviderMockNewTLS
}

// NewTLSProviderMock returns a mock for TLSProvider
func NewTLSProviderMock(t minimock.Tester) *TLSProviderMock {
	m := &TLSProviderMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.NewServerTLSFromFileMock = mTLSProviderMockNewServerTLSFromFile{mock: m}
	m.NewServerTLSFromFileMock.callArgs = []*TLSProviderMockNewServerTLSFromFileParams{}

	m.NewTLSMock = mTLSProviderMockNewTLS{mock: m}
	m.NewTLSMock.callArgs = []*TLSProviderMockNewTLSParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mTLSProviderMockNewServerTLSFromFile struct {
	optional           bool
	mock               *TLSProviderMock
	defaultExpectation *TLSProviderMockNewServerTLSFromFileExpectation
	expectations       []*TLSProviderMockNewServerTLSFromFileExpectation

	callArgs []*TLSProviderMockNewServerTLSFromFileParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// TLSProviderMockNewServerTLSFromFileExpectation specifies expectation struct of the TLSProvider.NewServerTLSFromFile
type TLSProviderMockNewServerTLSFromFileExpectation struct {
	mock               *TLSProviderMock
	params             *TLSProviderMockNewServerTLSFromFileParams
	paramPtrs          *TLSProviderMockNewServerTLSFromFileParamPtrs
	expectationOrigins TLSProviderMockNewServerTLSFromFileExpectationOrigins
	results            *TLSProviderMockNewServerTLSFromFileResults
	returnOrigin       string
	Counter            uint64
}

// TLSProviderMockNewServerTLSFromFileParams contains parameters of the TLSProvider.NewServerTLSFromFile
type TLSProviderMockNewServerTLSFromFileParams struct {
	certFile string
	keyFile  string
}

// TLSProviderMockNewServerTLSFromFileParamPtrs contains pointers to parameters of the TLSProvider.NewServerTLSFromFile
type TLSProviderMockNewServerTLSFromFileParamPtrs struct {
	certFile *string
	keyFile  *string
}

// TLSProviderMockNewServerTLSFromFileResults contains results of the TLSProvider.NewServerTLSFromFile
type TLSProviderMockNewServerTLSFromFileResults struct {
	t1  credentials.TransportCredentials
	err error
}

// TLSProviderMockNewServerTLSFromFileOrigins contains origins of expectations of the TLSProvider.NewServerTLSFromFile
type TLSProviderMockNewServerTLSFromFileExpectationOrigins struct {
	origin         string
	originCertFile string
	originKeyFile  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmNewServerTLSFromFile *mTLSProviderMockNewServerTLSFromFile) Optional() *mTLSProviderMockNewServerTLSFromFile {
	mmNewServerTLSFromFile.optional = true
	return mmNewServerTLSFromFile
}

// Expect sets up expected params for TLSProvider.NewServerTLSFromFile
func (mmNewServerTLSFromFile *mTLSProviderMockNewServerTLSFromFile) Expect(certFile string, keyFile string) *mTLSProviderMockNewServerTLSFromFile {
	if mmNewServerTLSFromFile.mock.funcNewServerTLSFromFile != nil {
		mmNewServerTLSFromFile.mock.t.Fatalf("TLSProviderMock.NewServerTLSFromFile mock is already set by Set")
	}

	if mmNewServerTLSFromFile.defaultExpectation == nil {
		mmNewServerTLSFromFile.defaultExpectation = &TLSProviderMockNewServerTLSFromFileExpectation{}
	}

	if mmNewServerTLSFromFile.defaultExpectation.paramPtrs != nil {
		mmNewServerTLSFromFile.mock.t.Fatalf("TLSProviderMock.NewServerTLSFromFile mock is already set by ExpectParams functions")
	}

	mmNewServerTLSFromFile.defaultExpectation.params = &TLSProviderMockNewServerTLSFromFileParams{certFile, keyFile}
	mmNewServerTLSFromFile.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmNewServerTLSFromFile.expectations {
		if minimock.Equal(e.params, mmNewServerTLSFromFile.defaultExpectation.params) {
			mmNewServerTLSFromFile.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmNewServerTLSFromFile.defaultExpectation.params)
		}
	}

	return mmNewServerTLSFromFile
}

// ExpectCertFileParam1 sets up expected param certFile for TLSProvider.NewServerTLSFromFile
func (mmNewServerTLSFromFile *mTLSProviderMockNewServerTLSFromFile) ExpectCertFileParam1(certFile string) *mTLSProviderMockNewServerTLSFromFile {
	if mmNewServerTLSFromFile.mock.funcNewServerTLSFromFile != nil {
		mmNewServerTLSFromFile.mock.t.Fatalf("TLSProviderMock.NewServerTLSFromFile mock is already set by Set")
	}

	if mmNewServerTLSFromFile.defaultExpectation == nil {
		mmNewServerTLSFromFile.defaultExpectation = &TLSProviderMockNewServerTLSFromFileExpectation{}
	}

	if mmNewServerTLSFromFile.defaultExpectation.params != nil {
		mmNewServerTLSFromFile.mock.t.Fatalf("TLSProviderMock.NewServerTLSFromFile mock is already set by Expect")
	}

	if mmNewServerTLSFromFile.defaultExpectation.paramPtrs == nil {
		mmNewServerTLSFromFile.defaultExpectation.paramPtrs = &TLSProviderMockNewServerTLSFromFileParamPtrs{}
	}
	mmNewServerTLSFromFile.defaultExpectation.paramPtrs.certFile = &certFile
	mmNewServerTLSFromFile.defaultExpectation.expectationOrigins.originCertFile = minimock.CallerInfo(1)

	return mmNewServerTLSFromFile
}

// ExpectKeyFileParam2 sets up expected param keyFile for TLSProvider.NewServerTLSFromFile
func (mmNewServerTLSFromFile *mTLSProviderMockNewServerTLSFromFile) ExpectKeyFileParam2(keyFile string) *mTLSProviderMockNewServerTLSFromFile {
	if mmNewServerTLSFromFile.mock.funcNewServerTLSFromFile != nil {
		mmNewServerTLSFromFile.mock.t.Fatalf("TLSProviderMock.NewServerTLSFromFile mock is already set by Set")
	}

	if mmNewServerTLSFromFile.defaultExpectation == nil {
		mmNewServerTLSFromFile.defaultExpectation = &TLSProviderMockNewServerTLSFromFileExpectation{}
	}

	if mmNewServerTLSFromFile.defaultExpectation.params != nil {
		mmNewServerTLSFromFile.mock.t.Fatalf("TLSProviderMock.NewServerTLSFromFile mock is already set by Expect")
	}

	if mmNewServerTLSFromFile.defaultExpectation.paramPtrs == nil {
		mmNewServerTLSFromFile.defaultExpectation.paramPtrs = &TLSProviderMockNewServerTLSFromFileParamPtrs{}
	}
	mmNewServerTLSFromFile.defaultExpectation.paramPtrs.keyFile = &keyFile
	mmNewServerTLSFromFile.defaultExpectation.expectationOrigins.originKeyFile = minimock.CallerInfo(1)

	return mmNewServerTLSFromFile
}

// Inspect accepts an inspector function that has same arguments as the TLSProvider.NewServerTLSFromFile
func (mmNewServerTLSFromFile *mTLSProviderMockNewServerTLSFromFile) Inspect(f func(certFile string, keyFile string)) *mTLSProviderMockNewServerTLSFromFile {
	if mmNewServerTLSFromFile.mock.inspectFuncNewServerTLSFromFile != nil {
		mmNewServerTLSFromFile.mock.t.Fatalf("Inspect function is already set for TLSProviderMock.NewServerTLSFromFile")
	}

	mmNewServerTLSFromFile.mock.inspectFuncNewServerTLSFromFile = f

	return mmNewServerTLSFromFile
}

// Return sets up results that will be returned by TLSProvider.NewServerTLSFromFile
func (mmNewServerTLSFromFile *mTLSProviderMockNewServerTLSFromFile) Return(t1 credentials.TransportCredentials, err error) *TLSProviderMock {
	if mmNewServerTLSFromFile.mock.funcNewServerTLSFromFile != nil {
		mmNewServerTLSFromFile.mock.t.Fatalf("TLSProviderMock.NewServerTLSFromFile mock is already set by Set")
	}

	if mmNewServerTLSFromFile.defaultExpectation == nil {
		mmNewServerTLSFromFile.defaultExpectation = &TLSProviderMockNewServerTLSFromFileExpectation{mock: mmNewServerTLSFromFile.mock}
	}
	mmNewServerTLSFromFile.defaultExpectation.results = &TLSProviderMockNewServerTLSFromFileResults{t1, err}
	mmNewServerTLSFromFile.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmNewServerTLSFromFile.mock
}

// Set uses given function f to mock the TLSProvider.NewServerTLSFromFile method
func (mmNewServerTLSFromFile *mTLSProviderMockNewServerTLSFromFile) Set(f func(certFile string, keyFile string) (t1 credentials.TransportCredentials, err error)) *TLSProviderMock {
	if mmNewServerTLSFromFile.defaultExpectation != nil {
		mmNewServerTLSFromFile.mock.t.Fatalf("Default expectation is already set for the TLSProvider.NewServerTLSFromFile method")
	}

	if len(mmNewServerTLSFromFile.expectations) > 0 {
		mmNewServerTLSFromFile.mock.t.Fatalf("Some expectations are already set for the TLSProvider.NewServerTLSFromFile method")
	}

	mmNewServerTLSFromFile.mock.funcNewServerTLSFromFile = f
	mmNewServerTLSFromFile.mock.funcNewServerTLSFromFileOrigin = minimock.CallerInfo(1)
	return mmNewServerTLSFromFile.mock
}

// When sets expectation for the TLSProvider.NewServerTLSFromFile which will trigger the result defined by the following
// Then helper
func (mmNewServerTLSFromFile *mTLSProviderMockNewServerTLSFromFile) When(certFile string, keyFile string) *TLSProviderMockNewServerTLSFromFileExpectation {
	if mmNewServerTLSFromFile.mock.funcNewServerTLSFromFile != nil {
		mmNewServerTLSFromFile.mock.t.Fatalf("TLSProviderMock.NewServerTLSFromFile mock is already set by Set")
	}

	expectation := &TLSProviderMockNewServerTLSFromFileExpectation{
		mock:               mmNewServerTLSFromFile.mock,
		params:             &TLSProviderMockNewServerTLSFromFileParams{certFile, keyFile},
		expectationOrigins: TLSProviderMockNewServerTLSFromFileExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmNewServerTLSFromFile.expectations = append(mmNewServerTLSFromFile.expectations, expectation)
	return expectation
}

// Then sets up TLSProvider.NewServerTLSFromFile return parameters for the expectation previously defined by the When method
func (e *TLSProviderMockNewServerTLSFromFileExpectation) Then(t1 credentials.TransportCredentials, err error) *TLSProviderMock {
	e.results = &TLSProviderMockNewServerTLSFromFileResults{t1, err}
	return e.mock
}

// Times sets number of times TLSProvider.NewServerTLSFromFile should be invoked
func (mmNewServerTLSFromFile *mTLSProviderMockNewServerTLSFromFile) Times(n uint64) *mTLSProviderMockNewServerTLSFromFile {
	if n == 0 {
		mmNewServerTLSFromFile.mock.t.Fatalf("Times of TLSProviderMock.NewServerTLSFromFile mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmNewServerTLSFromFile.expectedInvocations, n)
	mmNewServerTLSFromFile.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmNewServerTLSFromFile
}

func (mmNewServerTLSFromFile *mTLSProviderMockNewServerTLSFromFile) invocationsDone() bool {
	if len(mmNewServerTLSFromFile.expectations) == 0 && mmNewServerTLSFromFile.defaultExpectation == nil && mmNewServerTLSFromFile.mock.funcNewServerTLSFromFile == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmNewServerTLSFromFile.mock.afterNewServerTLSFromFileCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmNewServerTLSFromFile.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// NewServerTLSFromFile implements TLSProvider
func (mmNewServerTLSFromFile *TLSProviderMock) NewServerTLSFromFile(certFile string, keyFile string) (t1 credentials.TransportCredentials, err error) {
	mm_atomic.AddUint64(&mmNewServerTLSFromFile.beforeNewServerTLSFromFileCounter, 1)
	defer mm_atomic.AddUint64(&mmNewServerTLSFromFile.afterNewServerTLSFromFileCounter, 1)

	mmNewServerTLSFromFile.t.Helper()

	if mmNewServerTLSFromFile.inspectFuncNewServerTLSFromFile != nil {
		mmNewServerTLSFromFile.inspectFuncNewServerTLSFromFile(certFile, keyFile)
	}

	mm_params := TLSProviderMockNewServerTLSFromFileParams{certFile, keyFile}

	// Record call args
	mmNewServerTLSFromFile.NewServerTLSFromFileMock.mutex.Lock()
	mmNewServerTLSFromFile.NewServerTLSFromFileMock.callArgs = append(mmNewServerTLSFromFile.NewServerTLSFromFileMock.callArgs, &mm_params)
	mmNewServerTLSFromFile.NewServerTLSFromFileMock.mutex.Unlock()

	for _, e := range mmNewServerTLSFromFile.NewServerTLSFromFileMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.t1, e.results.err
		}
	}

	if mmNewServerTLSFromFile.NewServerTLSFromFileMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNewServerTLSFromFile.NewServerTLSFromFileMock.defaultExpectation.Counter, 1)
		mm_want := mmNewServerTLSFromFile.NewServerTLSFromFileMock.defaultExpectation.params
		mm_want_ptrs := mmNewServerTLSFromFile.NewServerTLSFromFileMock.defaultExpectation.paramPtrs

		mm_got := TLSProviderMockNewServerTLSFromFileParams{certFile, keyFile}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.certFile != nil && !minimock.Equal(*mm_want_ptrs.certFile, mm_got.certFile) {
				mmNewServerTLSFromFile.t.Errorf("TLSProviderMock.NewServerTLSFromFile got unexpected parameter certFile, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmNewServerTLSFromFile.NewServerTLSFromFileMock.defaultExpectation.expectationOrigins.originCertFile, *mm_want_ptrs.certFile, mm_got.certFile, minimock.Diff(*mm_want_ptrs.certFile, mm_got.certFile))
			}

			if mm_want_ptrs.keyFile != nil && !minimock.Equal(*mm_want_ptrs.keyFile, mm_got.keyFile) {
				mmNewServerTLSFromFile.t.Errorf("TLSProviderMock.NewServerTLSFromFile got unexpected parameter keyFile, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmNewServerTLSFromFile.NewServerTLSFromFileMock.defaultExpectation.expectationOrigins.originKeyFile, *mm_want_ptrs.keyFile, mm_got.keyFile, minimock.Diff(*mm_want_ptrs.keyFile, mm_got.keyFile))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmNewServerTLSFromFile.t.Errorf("TLSProviderMock.NewServerTLSFromFile got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmNewServerTLSFromFile.NewServerTLSFromFileMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmNewServerTLSFromFile.NewServerTLSFromFileMock.defaultExpectation.results
		if mm_results == nil {
			mmNewServerTLSFromFile.t.Fatal("No results are set for the TLSProviderMock.NewServerTLSFromFile")
		}
		return (*mm_results).t1, (*mm_results).err
	}
	if mmNewServerTLSFromFile.funcNewServerTLSFromFile != nil {
		return mmNewServerTLSFromFile.funcNewServerTLSFromFile(certFile, keyFile)
	}
	mmNewServerTLSFromFile.t.Fatalf("Unexpected call to TLSProviderMock.NewServerTLSFromFile. %v %v", certFile, keyFile)
	return
}

// NewServerTLSFromFileAfterCounter returns a count of finished TLSProviderMock.NewServerTLSFromFile invocations
func (mmNewServerTLSFromFile *TLSProviderMock) NewServerTLSFromFileAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNewServerTLSFromFile.afterNewServerTLSFromFileCounter)
}

// NewServerTLSFromFileBeforeCounter returns a count of TLSProviderMock.NewServerTLSFromFile invocations
func (mmNewServerTLSFromFile *TLSProviderMock) NewServerTLSFromFileBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNewServerTLSFromFile.beforeNewServerTLSFromFileCounter)
}

// Calls returns a list of arguments used in each call to TLSProviderMock.NewServerTLSFromFile.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmNewServerTLSFromFile *mTLSProviderMockNewServerTLSFromFile) Calls() []*TLSProviderMockNewServerTLSFromFileParams {
	mmNewServerTLSFromFile.mutex.RLock()

	argCopy := make([]*TLSProviderMockNewServerTLSFromFileParams, len(mmNewServerTLSFromFile.callArgs))
	copy(argCopy, mmNewServerTLSFromFile.callArgs)

	mmNewServerTLSFromFile.mutex.RUnlock()

	return argCopy
}

// MinimockNewServerTLSFromFileDone returns true if the count of the NewServerTLSFromFile invocations corresponds
// the number of defined expectations
func (m *TLSProviderMock) MinimockNewServerTLSFromFileDone() bool {
	if m.NewServerTLSFromFileMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.NewServerTLSFromFileMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.NewServerTLSFromFileMock.invocationsDone()
}

// MinimockNewServerTLSFromFileInspect logs each unmet expectation
func (m *TLSProviderMock) MinimockNewServerTLSFromFileInspect() {
	for _, e := range m.NewServerTLSFromFileMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TLSProviderMock.NewServerTLSFromFile at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterNewServerTLSFromFileCounter := mm_atomic.LoadUint64(&m.afterNewServerTLSFromFileCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.NewServerTLSFromFileMock.defaultExpectation != nil && afterNewServerTLSFromFileCounter < 1 {
		if m.NewServerTLSFromFileMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to TLSProviderMock.NewServerTLSFromFile at\n%s", m.NewServerTLSFromFileMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to TLSProviderMock.NewServerTLSFromFile at\n%s with params: %#v", m.NewServerTLSFromFileMock.defaultExpectation.expectationOrigins.origin, *m.NewServerTLSFromFileMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNewServerTLSFromFile != nil && afterNewServerTLSFromFileCounter < 1 {
		m.t.Errorf("Expected call to TLSProviderMock.NewServerTLSFromFile at\n%s", m.funcNewServerTLSFromFileOrigin)
	}

	if !m.NewServerTLSFromFileMock.invocationsDone() && afterNewServerTLSFromFileCounter > 0 {
		m.t.Errorf("Expected %d calls to TLSProviderMock.NewServerTLSFromFile at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.NewServerTLSFromFileMock.expectedInvocations), m.NewServerTLSFromFileMock.expectedInvocationsOrigin, afterNewServerTLSFromFileCounter)
	}
}

type mTLSProviderMockNewTLS struct {
	optional           bool
	mock               *TLSProviderMock
	defaultExpectation *TLSProviderMockNewTLSExpectation
	expectations       []*TLSProviderMockNewTLSExpectation

	callArgs []*TLSProviderMockNewTLSParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// TLSProviderMockNewTLSExpectation specifies expectation struct of the TLSProvider.NewTLS
type TLSProviderMockNewTLSExpectation struct {
	mock               *TLSProviderMock
	params             *TLSProviderMockNewTLSParams
	paramPtrs          *TLSProviderMockNewTLSParamPtrs
	expectationOrigins TLSProviderMockNewTLSExpectationOrigins
	results            *TLSProviderMockNewTLSResults
	returnOrigin       string
	Counter            uint64
}

// TLSProviderMockNewTLSParams contains parameters of the TLSProvider.NewTLS
type TLSProviderMockNewTLSParams struct {
	config *tls.Config
}

// TLSProviderMockNewTLSParamPtrs contains pointers to parameters of the TLSProvider.NewTLS
type TLSProviderMockNewTLSParamPtrs struct {
	config **tls.Config
}

// TLSProviderMockNewTLSResults contains results of the TLSProvider.NewTLS
type TLSProviderMockNewTLSResults struct {
	t1 credentials.TransportCredentials
}

// TLSProviderMockNewTLSOrigins contains origins of expectations of the TLSProvider.NewTLS
type TLSProviderMockNewTLSExpectationOrigins struct {
	origin       string
	originConfig string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmNewTLS *mTLSProviderMockNewTLS) Optional() *mTLSProviderMockNewTLS {
	mmNewTLS.optional = true
	return mmNewTLS
}

// Expect sets up expected params for TLSProvider.NewTLS
func (mmNewTLS *mTLSProviderMockNewTLS) Expect(config *tls.Config) *mTLSProviderMockNewTLS {
	if mmNewTLS.mock.funcNewTLS != nil {
		mmNewTLS.mock.t.Fatalf("TLSProviderMock.NewTLS mock is already set by Set")
	}

	if mmNewTLS.defaultExpectation == nil {
		mmNewTLS.defaultExpectation = &TLSProviderMockNewTLSExpectation{}
	}

	if mmNewTLS.defaultExpectation.paramPtrs != nil {
		mmNewTLS.mock.t.Fatalf("TLSProviderMock.NewTLS mock is already set by ExpectParams functions")
	}

	mmNewTLS.defaultExpectation.params = &TLSProviderMockNewTLSParams{config}
	mmNewTLS.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmNewTLS.expectations {
		if minimock.Equal(e.params, mmNewTLS.defaultExpectation.params) {
			mmNewTLS.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmNewTLS.defaultExpectation.params)
		}
	}

	return mmNewTLS
}

// ExpectConfigParam1 sets up expected param config for TLSProvider.NewTLS
func (mmNewTLS *mTLSProviderMockNewTLS) ExpectConfigParam1(config *tls.Config) *mTLSProviderMockNewTLS {
	if mmNewTLS.mock.funcNewTLS != nil {
		mmNewTLS.mock.t.Fatalf("TLSProviderMock.NewTLS mock is already set by Set")
	}

	if mmNewTLS.defaultExpectation == nil {
		mmNewTLS.defaultExpectation = &TLSProviderMockNewTLSExpectation{}
	}

	if mmNewTLS.defaultExpectation.params != nil {
		mmNewTLS.mock.t.Fatalf("TLSProviderMock.NewTLS mock is already set by Expect")
	}

	if mmNewTLS.defaultExpectation.paramPtrs == nil {
		mmNewTLS.defaultExpectation.paramPtrs = &TLSProviderMockNewTLSParamPtrs{}
	}
	mmNewTLS.defaultExpectation.paramPtrs.config = &config
	mmNewTLS.defaultExpectation.expectationOrigins.originConfig = minimock.CallerInfo(1)

	return mmNewTLS
}

// Inspect accepts an inspector function that has same arguments as the TLSProvider.NewTLS
func (mmNewTLS *mTLSProviderMockNewTLS) Inspect(f func(config *tls.Config)) *mTLSProviderMockNewTLS {
	if mmNewTLS.mock.inspectFuncNewTLS != nil {
		mmNewTLS.mock.t.Fatalf("Inspect function is already set for TLSProviderMock.NewTLS")
	}

	mmNewTLS.mock.inspectFuncNewTLS = f

	return mmNewTLS
}

// Return sets up results that will be returned by TLSProvider.NewTLS
func (mmNewTLS *mTLSProviderMockNewTLS) Return(t1 credentials.TransportCredentials) *TLSProviderMock {
	if mmNewTLS.mock.funcNewTLS != nil {
		mmNewTLS.mock.t.Fatalf("TLSProviderMock.NewTLS mock is already set by Set")
	}

	if mmNewTLS.defaultExpectation == nil {
		mmNewTLS.defaultExpectation = &TLSProviderMockNewTLSExpectation{mock: mmNewTLS.mock}
	}
	mmNewTLS.defaultExpectation.results = &TLSProviderMockNewTLSResults{t1}
	mmNewTLS.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmNewTLS.mock
}

// Set uses given function f to mock the TLSProvider.NewTLS method
func (mmNewTLS *mTLSProviderMockNewTLS) Set(f func(config *tls.Config) (t1 credentials.TransportCredentials)) *TLSProviderMock {
	if mmNewTLS.defaultExpectation != nil {
		mmNewTLS.mock.t.Fatalf("Default expectation is already set for the TLSProvider.NewTLS method")
	}

	if len(mmNewTLS.expectations) > 0 {
		mmNewTLS.mock.t.Fatalf("Some expectations are already set for the TLSProvider.NewTLS method")
	}

	mmNewTLS.mock.funcNewTLS = f
	mmNewTLS.mock.funcNewTLSOrigin = minimock.CallerInfo(1)
	return mmNewTLS.mock
}

// When sets expectation for the TLSProvider.NewTLS which will trigger the result defined by the following
// Then helper
func (mmNewTLS *mTLSProviderMockNewTLS) When(config *tls.Config) *TLSProviderMockNewTLSExpectation {
	if mmNewTLS.mock.funcNewTLS != nil {
		mmNewTLS.mock.t.Fatalf("TLSProviderMock.NewTLS mock is already set by Set")
	}

	expectation := &TLSProviderMockNewTLSExpectation{
		mock:               mmNewTLS.mock,
		params:             &TLSProviderMockNewTLSParams{config},
		expectationOrigins: TLSProviderMockNewTLSExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmNewTLS.expectations = append(mmNewTLS.expectations, expectation)
	return expectation
}

// Then sets up TLSProvider.NewTLS return parameters for the expectation previously defined by the When method
func (e *TLSProviderMockNewTLSExpectation) Then(t1 credentials.TransportCredentials) *TLSProviderMock {
	e.results = &TLSProviderMockNewTLSResults{t1}
	return e.mock
}

// Times sets number of times TLSProvider.NewTLS should be invoked
func (mmNewTLS *mTLSProviderMockNewTLS) Times(n uint64) *mTLSProviderMockNewTLS {
	if n == 0 {
		mmNewTLS.mock.t.Fatalf("Times of TLSProviderMock.NewTLS mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmNewTLS.expectedInvocations, n)
	mmNewTLS.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmNewTLS
}

func (mmNewTLS *mTLSProviderMockNewTLS) invocationsDone() bool {
	if len(mmNewTLS.expectations) == 0 && mmNewTLS.defaultExpectation == nil && mmNewTLS.mock.funcNewTLS == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmNewTLS.mock.afterNewTLSCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmNewTLS.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// NewTLS implements TLSProvider
func (mmNewTLS *TLSProviderMock) NewTLS(config *tls.Config) (t1 credentials.TransportCredentials) {
	mm_atomic.AddUint64(&mmNewTLS.beforeNewTLSCounter, 1)
	defer mm_atomic.AddUint64(&mmNewTLS.afterNewTLSCounter, 1)

	mmNewTLS.t.Helper()

	if mmNewTLS.inspectFuncNewTLS != nil {
		mmNewTLS.inspectFuncNewTLS(config)
	}

	mm_params := TLSProviderMockNewTLSParams{config}

	// Record call args
	mmNewTLS.NewTLSMock.mutex.Lock()
	mmNewTLS.NewTLSMock.callArgs = append(mmNewTLS.NewTLSMock.callArgs, &mm_params)
	mmNewTLS.NewTLSMock.mutex.Unlock()

	for _, e := range mmNewTLS.NewTLSMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.t1
		}
	}

	if mmNewTLS.NewTLSMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNewTLS.NewTLSMock.defaultExpectation.Counter, 1)
		mm_want := mmNewTLS.NewTLSMock.defaultExpectation.params
		mm_want_ptrs := mmNewTLS.NewTLSMock.defaultExpectation.paramPtrs

		mm_got := TLSProviderMockNewTLSParams{config}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.config != nil && !minimock.Equal(*mm_want_ptrs.config, mm_got.config) {
				mmNewTLS.t.Errorf("TLSProviderMock.NewTLS got unexpected parameter config, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmNewTLS.NewTLSMock.defaultExpectation.expectationOrigins.originConfig, *mm_want_ptrs.config, mm_got.config, minimock.Diff(*mm_want_ptrs.config, mm_got.config))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmNewTLS.t.Errorf("TLSProviderMock.NewTLS got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmNewTLS.NewTLSMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmNewTLS.NewTLSMock.defaultExpectation.results
		if mm_results == nil {
			mmNewTLS.t.Fatal("No results are set for the TLSProviderMock.NewTLS")
		}
		return (*mm_results).t1
	}
	if mmNewTLS.funcNewTLS != nil {
		return mmNewTLS.funcNewTLS(config)
	}
	mmNewTLS.t.Fatalf("Unexpected call to TLSProviderMock.NewTLS. %v", config)
	return
}

// NewTLSAfterCounter returns a count of finished TLSProviderMock.NewTLS invocations
func (mmNewTLS *TLSProviderMock) NewTLSAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNewTLS.afterNewTLSCounter)
}

// NewTLSBeforeCounter returns a count of TLSProviderMock.NewTLS invocations
func (mmNewTLS *TLSProviderMock) NewTLSBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNewTLS.beforeNewTLSCounter)
}

// Calls returns a list of arguments used in each call to TLSProviderMock.NewTLS.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmNewTLS *mTLSProviderMockNewTLS) Calls() []*TLSProviderMockNewTLSParams {
	mmNewTLS.mutex.RLock()

	argCopy := make([]*TLSProviderMockNewTLSParams, len(mmNewTLS.callArgs))
	copy(argCopy, mmNewTLS.callArgs)

	mmNewTLS.mutex.RUnlock()

	return argCopy
}

// MinimockNewTLSDone returns true if the count of the NewTLS invocations corresponds
// the number of defined expectations
func (m *TLSProviderMock) MinimockNewTLSDone() bool {
	if m.NewTLSMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.NewTLSMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.NewTLSMock.invocationsDone()
}

// MinimockNewTLSInspect logs each unmet expectation
func (m *TLSProviderMock) MinimockNewTLSInspect() {
	for _, e := range m.NewTLSMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TLSProviderMock.NewTLS at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterNewTLSCounter := mm_atomic.LoadUint64(&m.afterNewTLSCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.NewTLSMock.defaultExpectation != nil && afterNewTLSCounter < 1 {
		if m.NewTLSMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to TLSProviderMock.NewTLS at\n%s", m.NewTLSMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to TLSProviderMock.NewTLS at\n%s with params: %#v", m.NewTLSMock.defaultExpectation.expectationOrigins.origin, *m.NewTLSMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNewTLS != nil && afterNewTLSCounter < 1 {
		m.t.Errorf("Expected call to TLSProviderMock.NewTLS at\n%s", m.funcNewTLSOrigin)
	}

	if !m.NewTLSMock.invocationsDone() && afterNewTLSCounter > 0 {
		m.t.Errorf("Expected %d calls to TLSProviderMock.NewTLS at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.NewTLSMock.expectedInvocations), m.NewTLSMock.expectedInvocationsOrigin, afterNewTLSCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TLSProviderMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockNewServerTLSFromFileInspect()

			m.MinimockNewTLSInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TLSProviderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TLSProviderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockNewServerTLSFromFileDone() &&
		m.MinimockNewTLSDone()
}
