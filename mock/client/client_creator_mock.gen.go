// Code generated by http://github.com/gojuno/minimock (v3.4.3). DO NOT EDIT.

package client

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"google.golang.org/grpc"
)

// ClientCreatorMock implements ClientCreator
type ClientCreatorMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateClient          func(conn *grpc.ClientConn) (a1 any)
	funcCreateClientOrigin    string
	inspectFuncCreateClient   func(conn *grpc.ClientConn)
	afterCreateClientCounter  uint64
	beforeCreateClientCounter uint64
	CreateClientMock          mClientCreatorMockCreateClient

	funcIsPublic          func() (b1 bool)
	funcIsPublicOrigin    string
	inspectFuncIsPublic   func()
	afterIsPublicCounter  uint64
	beforeIsPublicCounter uint64
	IsPublicMock          mClientCreatorMockIsPublic
}

// NewClientCreatorMock returns a mock for ClientCreator
func NewClientCreatorMock(t minimock.Tester) *ClientCreatorMock {
	m := &ClientCreatorMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateClientMock = mClientCreatorMockCreateClient{mock: m}
	m.CreateClientMock.callArgs = []*ClientCreatorMockCreateClientParams{}

	m.IsPublicMock = mClientCreatorMockIsPublic{mock: m}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mClientCreatorMockCreateClient struct {
	optional           bool
	mock               *ClientCreatorMock
	defaultExpectation *ClientCreatorMockCreateClientExpectation
	expectations       []*ClientCreatorMockCreateClientExpectation

	callArgs []*ClientCreatorMockCreateClientParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ClientCreatorMockCreateClientExpectation specifies expectation struct of the ClientCreator.CreateClient
type ClientCreatorMockCreateClientExpectation struct {
	mock               *ClientCreatorMock
	params             *ClientCreatorMockCreateClientParams
	paramPtrs          *ClientCreatorMockCreateClientParamPtrs
	expectationOrigins ClientCreatorMockCreateClientExpectationOrigins
	results            *ClientCreatorMockCreateClientResults
	returnOrigin       string
	Counter            uint64
}

// ClientCreatorMockCreateClientParams contains parameters of the ClientCreator.CreateClient
type ClientCreatorMockCreateClientParams struct {
	conn *grpc.ClientConn
}

// ClientCreatorMockCreateClientParamPtrs contains pointers to parameters of the ClientCreator.CreateClient
type ClientCreatorMockCreateClientParamPtrs struct {
	conn **grpc.ClientConn
}

// ClientCreatorMockCreateClientResults contains results of the ClientCreator.CreateClient
type ClientCreatorMockCreateClientResults struct {
	a1 any
}

// ClientCreatorMockCreateClientOrigins contains origins of expectations of the ClientCreator.CreateClient
type ClientCreatorMockCreateClientExpectationOrigins struct {
	origin     string
	originConn string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateClient *mClientCreatorMockCreateClient) Optional() *mClientCreatorMockCreateClient {
	mmCreateClient.optional = true
	return mmCreateClient
}

// Expect sets up expected params for ClientCreator.CreateClient
func (mmCreateClient *mClientCreatorMockCreateClient) Expect(conn *grpc.ClientConn) *mClientCreatorMockCreateClient {
	if mmCreateClient.mock.funcCreateClient != nil {
		mmCreateClient.mock.t.Fatalf("ClientCreatorMock.CreateClient mock is already set by Set")
	}

	if mmCreateClient.defaultExpectation == nil {
		mmCreateClient.defaultExpectation = &ClientCreatorMockCreateClientExpectation{}
	}

	if mmCreateClient.defaultExpectation.paramPtrs != nil {
		mmCreateClient.mock.t.Fatalf("ClientCreatorMock.CreateClient mock is already set by ExpectParams functions")
	}

	mmCreateClient.defaultExpectation.params = &ClientCreatorMockCreateClientParams{conn}
	mmCreateClient.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateClient.expectations {
		if minimock.Equal(e.params, mmCreateClient.defaultExpectation.params) {
			mmCreateClient.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateClient.defaultExpectation.params)
		}
	}

	return mmCreateClient
}

// ExpectConnParam1 sets up expected param conn for ClientCreator.CreateClient
func (mmCreateClient *mClientCreatorMockCreateClient) ExpectConnParam1(conn *grpc.ClientConn) *mClientCreatorMockCreateClient {
	if mmCreateClient.mock.funcCreateClient != nil {
		mmCreateClient.mock.t.Fatalf("ClientCreatorMock.CreateClient mock is already set by Set")
	}

	if mmCreateClient.defaultExpectation == nil {
		mmCreateClient.defaultExpectation = &ClientCreatorMockCreateClientExpectation{}
	}

	if mmCreateClient.defaultExpectation.params != nil {
		mmCreateClient.mock.t.Fatalf("ClientCreatorMock.CreateClient mock is already set by Expect")
	}

	if mmCreateClient.defaultExpectation.paramPtrs == nil {
		mmCreateClient.defaultExpectation.paramPtrs = &ClientCreatorMockCreateClientParamPtrs{}
	}
	mmCreateClient.defaultExpectation.paramPtrs.conn = &conn
	mmCreateClient.defaultExpectation.expectationOrigins.originConn = minimock.CallerInfo(1)

	return mmCreateClient
}

// Inspect accepts an inspector function that has same arguments as the ClientCreator.CreateClient
func (mmCreateClient *mClientCreatorMockCreateClient) Inspect(f func(conn *grpc.ClientConn)) *mClientCreatorMockCreateClient {
	if mmCreateClient.mock.inspectFuncCreateClient != nil {
		mmCreateClient.mock.t.Fatalf("Inspect function is already set for ClientCreatorMock.CreateClient")
	}

	mmCreateClient.mock.inspectFuncCreateClient = f

	return mmCreateClient
}

// Return sets up results that will be returned by ClientCreator.CreateClient
func (mmCreateClient *mClientCreatorMockCreateClient) Return(a1 any) *ClientCreatorMock {
	if mmCreateClient.mock.funcCreateClient != nil {
		mmCreateClient.mock.t.Fatalf("ClientCreatorMock.CreateClient mock is already set by Set")
	}

	if mmCreateClient.defaultExpectation == nil {
		mmCreateClient.defaultExpectation = &ClientCreatorMockCreateClientExpectation{mock: mmCreateClient.mock}
	}
	mmCreateClient.defaultExpectation.results = &ClientCreatorMockCreateClientResults{a1}
	mmCreateClient.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateClient.mock
}

// Set uses given function f to mock the ClientCreator.CreateClient method
func (mmCreateClient *mClientCreatorMockCreateClient) Set(f func(conn *grpc.ClientConn) (a1 any)) *ClientCreatorMock {
	if mmCreateClient.defaultExpectation != nil {
		mmCreateClient.mock.t.Fatalf("Default expectation is already set for the ClientCreator.CreateClient method")
	}

	if len(mmCreateClient.expectations) > 0 {
		mmCreateClient.mock.t.Fatalf("Some expectations are already set for the ClientCreator.CreateClient method")
	}

	mmCreateClient.mock.funcCreateClient = f
	mmCreateClient.mock.funcCreateClientOrigin = minimock.CallerInfo(1)
	return mmCreateClient.mock
}

// When sets expectation for the ClientCreator.CreateClient which will trigger the result defined by the following
// Then helper
func (mmCreateClient *mClientCreatorMockCreateClient) When(conn *grpc.ClientConn) *ClientCreatorMockCreateClientExpectation {
	if mmCreateClient.mock.funcCreateClient != nil {
		mmCreateClient.mock.t.Fatalf("ClientCreatorMock.CreateClient mock is already set by Set")
	}

	expectation := &ClientCreatorMockCreateClientExpectation{
		mock:               mmCreateClient.mock,
		params:             &ClientCreatorMockCreateClientParams{conn},
		expectationOrigins: ClientCreatorMockCreateClientExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateClient.expectations = append(mmCreateClient.expectations, expectation)
	return expectation
}

// Then sets up ClientCreator.CreateClient return parameters for the expectation previously defined by the When method
func (e *ClientCreatorMockCreateClientExpectation) Then(a1 any) *ClientCreatorMock {
	e.results = &ClientCreatorMockCreateClientResults{a1}
	return e.mock
}

// Times sets number of times ClientCreator.CreateClient should be invoked
func (mmCreateClient *mClientCreatorMockCreateClient) Times(n uint64) *mClientCreatorMockCreateClient {
	if n == 0 {
		mmCreateClient.mock.t.Fatalf("Times of ClientCreatorMock.CreateClient mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateClient.expectedInvocations, n)
	mmCreateClient.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateClient
}

func (mmCreateClient *mClientCreatorMockCreateClient) invocationsDone() bool {
	if len(mmCreateClient.expectations) == 0 && mmCreateClient.defaultExpectation == nil && mmCreateClient.mock.funcCreateClient == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateClient.mock.afterCreateClientCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateClient.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateClient implements ClientCreator
func (mmCreateClient *ClientCreatorMock) CreateClient(conn *grpc.ClientConn) (a1 any) {
	mm_atomic.AddUint64(&mmCreateClient.beforeCreateClientCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateClient.afterCreateClientCounter, 1)

	mmCreateClient.t.Helper()

	if mmCreateClient.inspectFuncCreateClient != nil {
		mmCreateClient.inspectFuncCreateClient(conn)
	}

	mm_params := ClientCreatorMockCreateClientParams{conn}

	// Record call args
	mmCreateClient.CreateClientMock.mutex.Lock()
	mmCreateClient.CreateClientMock.callArgs = append(mmCreateClient.CreateClientMock.callArgs, &mm_params)
	mmCreateClient.CreateClientMock.mutex.Unlock()

	for _, e := range mmCreateClient.CreateClientMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.a1
		}
	}

	if mmCreateClient.CreateClientMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateClient.CreateClientMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateClient.CreateClientMock.defaultExpectation.params
		mm_want_ptrs := mmCreateClient.CreateClientMock.defaultExpectation.paramPtrs

		mm_got := ClientCreatorMockCreateClientParams{conn}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.conn != nil && !minimock.Equal(*mm_want_ptrs.conn, mm_got.conn) {
				mmCreateClient.t.Errorf("ClientCreatorMock.CreateClient got unexpected parameter conn, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateClient.CreateClientMock.defaultExpectation.expectationOrigins.originConn, *mm_want_ptrs.conn, mm_got.conn, minimock.Diff(*mm_want_ptrs.conn, mm_got.conn))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateClient.t.Errorf("ClientCreatorMock.CreateClient got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateClient.CreateClientMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateClient.CreateClientMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateClient.t.Fatal("No results are set for the ClientCreatorMock.CreateClient")
		}
		return (*mm_results).a1
	}
	if mmCreateClient.funcCreateClient != nil {
		return mmCreateClient.funcCreateClient(conn)
	}
	mmCreateClient.t.Fatalf("Unexpected call to ClientCreatorMock.CreateClient. %v", conn)
	return
}

// CreateClientAfterCounter returns a count of finished ClientCreatorMock.CreateClient invocations
func (mmCreateClient *ClientCreatorMock) CreateClientAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateClient.afterCreateClientCounter)
}

// CreateClientBeforeCounter returns a count of ClientCreatorMock.CreateClient invocations
func (mmCreateClient *ClientCreatorMock) CreateClientBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateClient.beforeCreateClientCounter)
}

// Calls returns a list of arguments used in each call to ClientCreatorMock.CreateClient.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateClient *mClientCreatorMockCreateClient) Calls() []*ClientCreatorMockCreateClientParams {
	mmCreateClient.mutex.RLock()

	argCopy := make([]*ClientCreatorMockCreateClientParams, len(mmCreateClient.callArgs))
	copy(argCopy, mmCreateClient.callArgs)

	mmCreateClient.mutex.RUnlock()

	return argCopy
}

// MinimockCreateClientDone returns true if the count of the CreateClient invocations corresponds
// the number of defined expectations
func (m *ClientCreatorMock) MinimockCreateClientDone() bool {
	if m.CreateClientMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateClientMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateClientMock.invocationsDone()
}

// MinimockCreateClientInspect logs each unmet expectation
func (m *ClientCreatorMock) MinimockCreateClientInspect() {
	for _, e := range m.CreateClientMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ClientCreatorMock.CreateClient at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateClientCounter := mm_atomic.LoadUint64(&m.afterCreateClientCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateClientMock.defaultExpectation != nil && afterCreateClientCounter < 1 {
		if m.CreateClientMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ClientCreatorMock.CreateClient at\n%s", m.CreateClientMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ClientCreatorMock.CreateClient at\n%s with params: %#v", m.CreateClientMock.defaultExpectation.expectationOrigins.origin, *m.CreateClientMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateClient != nil && afterCreateClientCounter < 1 {
		m.t.Errorf("Expected call to ClientCreatorMock.CreateClient at\n%s", m.funcCreateClientOrigin)
	}

	if !m.CreateClientMock.invocationsDone() && afterCreateClientCounter > 0 {
		m.t.Errorf("Expected %d calls to ClientCreatorMock.CreateClient at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateClientMock.expectedInvocations), m.CreateClientMock.expectedInvocationsOrigin, afterCreateClientCounter)
	}
}

type mClientCreatorMockIsPublic struct {
	optional           bool
	mock               *ClientCreatorMock
	defaultExpectation *ClientCreatorMockIsPublicExpectation
	expectations       []*ClientCreatorMockIsPublicExpectation

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ClientCreatorMockIsPublicExpectation specifies expectation struct of the ClientCreator.IsPublic
type ClientCreatorMockIsPublicExpectation struct {
	mock *ClientCreatorMock

	results      *ClientCreatorMockIsPublicResults
	returnOrigin string
	Counter      uint64
}

// ClientCreatorMockIsPublicResults contains results of the ClientCreator.IsPublic
type ClientCreatorMockIsPublicResults struct {
	b1 bool
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmIsPublic *mClientCreatorMockIsPublic) Optional() *mClientCreatorMockIsPublic {
	mmIsPublic.optional = true
	return mmIsPublic
}

// Expect sets up expected params for ClientCreator.IsPublic
func (mmIsPublic *mClientCreatorMockIsPublic) Expect() *mClientCreatorMockIsPublic {
	if mmIsPublic.mock.funcIsPublic != nil {
		mmIsPublic.mock.t.Fatalf("ClientCreatorMock.IsPublic mock is already set by Set")
	}

	if mmIsPublic.defaultExpectation == nil {
		mmIsPublic.defaultExpectation = &ClientCreatorMockIsPublicExpectation{}
	}

	return mmIsPublic
}

// Inspect accepts an inspector function that has same arguments as the ClientCreator.IsPublic
func (mmIsPublic *mClientCreatorMockIsPublic) Inspect(f func()) *mClientCreatorMockIsPublic {
	if mmIsPublic.mock.inspectFuncIsPublic != nil {
		mmIsPublic.mock.t.Fatalf("Inspect function is already set for ClientCreatorMock.IsPublic")
	}

	mmIsPublic.mock.inspectFuncIsPublic = f

	return mmIsPublic
}

// Return sets up results that will be returned by ClientCreator.IsPublic
func (mmIsPublic *mClientCreatorMockIsPublic) Return(b1 bool) *ClientCreatorMock {
	if mmIsPublic.mock.funcIsPublic != nil {
		mmIsPublic.mock.t.Fatalf("ClientCreatorMock.IsPublic mock is already set by Set")
	}

	if mmIsPublic.defaultExpectation == nil {
		mmIsPublic.defaultExpectation = &ClientCreatorMockIsPublicExpectation{mock: mmIsPublic.mock}
	}
	mmIsPublic.defaultExpectation.results = &ClientCreatorMockIsPublicResults{b1}
	mmIsPublic.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmIsPublic.mock
}

// Set uses given function f to mock the ClientCreator.IsPublic method
func (mmIsPublic *mClientCreatorMockIsPublic) Set(f func() (b1 bool)) *ClientCreatorMock {
	if mmIsPublic.defaultExpectation != nil {
		mmIsPublic.mock.t.Fatalf("Default expectation is already set for the ClientCreator.IsPublic method")
	}

	if len(mmIsPublic.expectations) > 0 {
		mmIsPublic.mock.t.Fatalf("Some expectations are already set for the ClientCreator.IsPublic method")
	}

	mmIsPublic.mock.funcIsPublic = f
	mmIsPublic.mock.funcIsPublicOrigin = minimock.CallerInfo(1)
	return mmIsPublic.mock
}

// Times sets number of times ClientCreator.IsPublic should be invoked
func (mmIsPublic *mClientCreatorMockIsPublic) Times(n uint64) *mClientCreatorMockIsPublic {
	if n == 0 {
		mmIsPublic.mock.t.Fatalf("Times of ClientCreatorMock.IsPublic mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmIsPublic.expectedInvocations, n)
	mmIsPublic.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmIsPublic
}

func (mmIsPublic *mClientCreatorMockIsPublic) invocationsDone() bool {
	if len(mmIsPublic.expectations) == 0 && mmIsPublic.defaultExpectation == nil && mmIsPublic.mock.funcIsPublic == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmIsPublic.mock.afterIsPublicCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmIsPublic.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// IsPublic implements ClientCreator
func (mmIsPublic *ClientCreatorMock) IsPublic() (b1 bool) {
	mm_atomic.AddUint64(&mmIsPublic.beforeIsPublicCounter, 1)
	defer mm_atomic.AddUint64(&mmIsPublic.afterIsPublicCounter, 1)

	mmIsPublic.t.Helper()

	if mmIsPublic.inspectFuncIsPublic != nil {
		mmIsPublic.inspectFuncIsPublic()
	}

	if mmIsPublic.IsPublicMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmIsPublic.IsPublicMock.defaultExpectation.Counter, 1)

		mm_results := mmIsPublic.IsPublicMock.defaultExpectation.results
		if mm_results == nil {
			mmIsPublic.t.Fatal("No results are set for the ClientCreatorMock.IsPublic")
		}
		return (*mm_results).b1
	}
	if mmIsPublic.funcIsPublic != nil {
		return mmIsPublic.funcIsPublic()
	}
	mmIsPublic.t.Fatalf("Unexpected call to ClientCreatorMock.IsPublic.")
	return
}

// IsPublicAfterCounter returns a count of finished ClientCreatorMock.IsPublic invocations
func (mmIsPublic *ClientCreatorMock) IsPublicAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsPublic.afterIsPublicCounter)
}

// IsPublicBeforeCounter returns a count of ClientCreatorMock.IsPublic invocations
func (mmIsPublic *ClientCreatorMock) IsPublicBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsPublic.beforeIsPublicCounter)
}

// MinimockIsPublicDone returns true if the count of the IsPublic invocations corresponds
// the number of defined expectations
func (m *ClientCreatorMock) MinimockIsPublicDone() bool {
	if m.IsPublicMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.IsPublicMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.IsPublicMock.invocationsDone()
}

// MinimockIsPublicInspect logs each unmet expectation
func (m *ClientCreatorMock) MinimockIsPublicInspect() {
	for _, e := range m.IsPublicMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to ClientCreatorMock.IsPublic")
		}
	}

	afterIsPublicCounter := mm_atomic.LoadUint64(&m.afterIsPublicCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.IsPublicMock.defaultExpectation != nil && afterIsPublicCounter < 1 {
		m.t.Errorf("Expected call to ClientCreatorMock.IsPublic at\n%s", m.IsPublicMock.defaultExpectation.returnOrigin)
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsPublic != nil && afterIsPublicCounter < 1 {
		m.t.Errorf("Expected call to ClientCreatorMock.IsPublic at\n%s", m.funcIsPublicOrigin)
	}

	if !m.IsPublicMock.invocationsDone() && afterIsPublicCounter > 0 {
		m.t.Errorf("Expected %d calls to ClientCreatorMock.IsPublic at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.IsPublicMock.expectedInvocations), m.IsPublicMock.expectedInvocationsOrigin, afterIsPublicCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ClientCreatorMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateClientInspect()

			m.MinimockIsPublicInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ClientCreatorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ClientCreatorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateClientDone() &&
		m.MinimockIsPublicDone()
}
