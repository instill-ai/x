// Code generated by http://github.com/gojuno/minimock (v3.4.3). DO NOT EDIT.

package client

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"google.golang.org/grpc"
)

// MetadataPropagatorMock implements MetadataPropagator
type MetadataPropagatorMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcStreamMetadataPropagatorInterceptor          func(ctx context.Context, desc *grpc.StreamDesc, cc *grpc.ClientConn, method string, streamer grpc.Streamer, opts ...grpc.CallOption) (c2 grpc.ClientStream, err error)
	funcStreamMetadataPropagatorInterceptorOrigin    string
	inspectFuncStreamMetadataPropagatorInterceptor   func(ctx context.Context, desc *grpc.StreamDesc, cc *grpc.ClientConn, method string, streamer grpc.Streamer, opts ...grpc.CallOption)
	afterStreamMetadataPropagatorInterceptorCounter  uint64
	beforeStreamMetadataPropagatorInterceptorCounter uint64
	StreamMetadataPropagatorInterceptorMock          mMetadataPropagatorMockStreamMetadataPropagatorInterceptor

	funcUnaryMetadataPropagatorInterceptor          func(ctx context.Context, method string, req any, reply any, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) (err error)
	funcUnaryMetadataPropagatorInterceptorOrigin    string
	inspectFuncUnaryMetadataPropagatorInterceptor   func(ctx context.Context, method string, req any, reply any, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption)
	afterUnaryMetadataPropagatorInterceptorCounter  uint64
	beforeUnaryMetadataPropagatorInterceptorCounter uint64
	UnaryMetadataPropagatorInterceptorMock          mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor
}

// NewMetadataPropagatorMock returns a mock for MetadataPropagator
func NewMetadataPropagatorMock(t minimock.Tester) *MetadataPropagatorMock {
	m := &MetadataPropagatorMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.StreamMetadataPropagatorInterceptorMock = mMetadataPropagatorMockStreamMetadataPropagatorInterceptor{mock: m}
	m.StreamMetadataPropagatorInterceptorMock.callArgs = []*MetadataPropagatorMockStreamMetadataPropagatorInterceptorParams{}

	m.UnaryMetadataPropagatorInterceptorMock = mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor{mock: m}
	m.UnaryMetadataPropagatorInterceptorMock.callArgs = []*MetadataPropagatorMockUnaryMetadataPropagatorInterceptorParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mMetadataPropagatorMockStreamMetadataPropagatorInterceptor struct {
	optional           bool
	mock               *MetadataPropagatorMock
	defaultExpectation *MetadataPropagatorMockStreamMetadataPropagatorInterceptorExpectation
	expectations       []*MetadataPropagatorMockStreamMetadataPropagatorInterceptorExpectation

	callArgs []*MetadataPropagatorMockStreamMetadataPropagatorInterceptorParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// MetadataPropagatorMockStreamMetadataPropagatorInterceptorExpectation specifies expectation struct of the MetadataPropagator.StreamMetadataPropagatorInterceptor
type MetadataPropagatorMockStreamMetadataPropagatorInterceptorExpectation struct {
	mock               *MetadataPropagatorMock
	params             *MetadataPropagatorMockStreamMetadataPropagatorInterceptorParams
	paramPtrs          *MetadataPropagatorMockStreamMetadataPropagatorInterceptorParamPtrs
	expectationOrigins MetadataPropagatorMockStreamMetadataPropagatorInterceptorExpectationOrigins
	results            *MetadataPropagatorMockStreamMetadataPropagatorInterceptorResults
	returnOrigin       string
	Counter            uint64
}

// MetadataPropagatorMockStreamMetadataPropagatorInterceptorParams contains parameters of the MetadataPropagator.StreamMetadataPropagatorInterceptor
type MetadataPropagatorMockStreamMetadataPropagatorInterceptorParams struct {
	ctx      context.Context
	desc     *grpc.StreamDesc
	cc       *grpc.ClientConn
	method   string
	streamer grpc.Streamer
	opts     []grpc.CallOption
}

// MetadataPropagatorMockStreamMetadataPropagatorInterceptorParamPtrs contains pointers to parameters of the MetadataPropagator.StreamMetadataPropagatorInterceptor
type MetadataPropagatorMockStreamMetadataPropagatorInterceptorParamPtrs struct {
	ctx      *context.Context
	desc     **grpc.StreamDesc
	cc       **grpc.ClientConn
	method   *string
	streamer *grpc.Streamer
	opts     *[]grpc.CallOption
}

// MetadataPropagatorMockStreamMetadataPropagatorInterceptorResults contains results of the MetadataPropagator.StreamMetadataPropagatorInterceptor
type MetadataPropagatorMockStreamMetadataPropagatorInterceptorResults struct {
	c2  grpc.ClientStream
	err error
}

// MetadataPropagatorMockStreamMetadataPropagatorInterceptorOrigins contains origins of expectations of the MetadataPropagator.StreamMetadataPropagatorInterceptor
type MetadataPropagatorMockStreamMetadataPropagatorInterceptorExpectationOrigins struct {
	origin         string
	originCtx      string
	originDesc     string
	originCc       string
	originMethod   string
	originStreamer string
	originOpts     string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmStreamMetadataPropagatorInterceptor *mMetadataPropagatorMockStreamMetadataPropagatorInterceptor) Optional() *mMetadataPropagatorMockStreamMetadataPropagatorInterceptor {
	mmStreamMetadataPropagatorInterceptor.optional = true
	return mmStreamMetadataPropagatorInterceptor
}

// Expect sets up expected params for MetadataPropagator.StreamMetadataPropagatorInterceptor
func (mmStreamMetadataPropagatorInterceptor *mMetadataPropagatorMockStreamMetadataPropagatorInterceptor) Expect(ctx context.Context, desc *grpc.StreamDesc, cc *grpc.ClientConn, method string, streamer grpc.Streamer, opts ...grpc.CallOption) *mMetadataPropagatorMockStreamMetadataPropagatorInterceptor {
	if mmStreamMetadataPropagatorInterceptor.mock.funcStreamMetadataPropagatorInterceptor != nil {
		mmStreamMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.StreamMetadataPropagatorInterceptor mock is already set by Set")
	}

	if mmStreamMetadataPropagatorInterceptor.defaultExpectation == nil {
		mmStreamMetadataPropagatorInterceptor.defaultExpectation = &MetadataPropagatorMockStreamMetadataPropagatorInterceptorExpectation{}
	}

	if mmStreamMetadataPropagatorInterceptor.defaultExpectation.paramPtrs != nil {
		mmStreamMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.StreamMetadataPropagatorInterceptor mock is already set by ExpectParams functions")
	}

	mmStreamMetadataPropagatorInterceptor.defaultExpectation.params = &MetadataPropagatorMockStreamMetadataPropagatorInterceptorParams{ctx, desc, cc, method, streamer, opts}
	mmStreamMetadataPropagatorInterceptor.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmStreamMetadataPropagatorInterceptor.expectations {
		if minimock.Equal(e.params, mmStreamMetadataPropagatorInterceptor.defaultExpectation.params) {
			mmStreamMetadataPropagatorInterceptor.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmStreamMetadataPropagatorInterceptor.defaultExpectation.params)
		}
	}

	return mmStreamMetadataPropagatorInterceptor
}

// ExpectCtxParam1 sets up expected param ctx for MetadataPropagator.StreamMetadataPropagatorInterceptor
func (mmStreamMetadataPropagatorInterceptor *mMetadataPropagatorMockStreamMetadataPropagatorInterceptor) ExpectCtxParam1(ctx context.Context) *mMetadataPropagatorMockStreamMetadataPropagatorInterceptor {
	if mmStreamMetadataPropagatorInterceptor.mock.funcStreamMetadataPropagatorInterceptor != nil {
		mmStreamMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.StreamMetadataPropagatorInterceptor mock is already set by Set")
	}

	if mmStreamMetadataPropagatorInterceptor.defaultExpectation == nil {
		mmStreamMetadataPropagatorInterceptor.defaultExpectation = &MetadataPropagatorMockStreamMetadataPropagatorInterceptorExpectation{}
	}

	if mmStreamMetadataPropagatorInterceptor.defaultExpectation.params != nil {
		mmStreamMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.StreamMetadataPropagatorInterceptor mock is already set by Expect")
	}

	if mmStreamMetadataPropagatorInterceptor.defaultExpectation.paramPtrs == nil {
		mmStreamMetadataPropagatorInterceptor.defaultExpectation.paramPtrs = &MetadataPropagatorMockStreamMetadataPropagatorInterceptorParamPtrs{}
	}
	mmStreamMetadataPropagatorInterceptor.defaultExpectation.paramPtrs.ctx = &ctx
	mmStreamMetadataPropagatorInterceptor.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmStreamMetadataPropagatorInterceptor
}

// ExpectDescParam2 sets up expected param desc for MetadataPropagator.StreamMetadataPropagatorInterceptor
func (mmStreamMetadataPropagatorInterceptor *mMetadataPropagatorMockStreamMetadataPropagatorInterceptor) ExpectDescParam2(desc *grpc.StreamDesc) *mMetadataPropagatorMockStreamMetadataPropagatorInterceptor {
	if mmStreamMetadataPropagatorInterceptor.mock.funcStreamMetadataPropagatorInterceptor != nil {
		mmStreamMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.StreamMetadataPropagatorInterceptor mock is already set by Set")
	}

	if mmStreamMetadataPropagatorInterceptor.defaultExpectation == nil {
		mmStreamMetadataPropagatorInterceptor.defaultExpectation = &MetadataPropagatorMockStreamMetadataPropagatorInterceptorExpectation{}
	}

	if mmStreamMetadataPropagatorInterceptor.defaultExpectation.params != nil {
		mmStreamMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.StreamMetadataPropagatorInterceptor mock is already set by Expect")
	}

	if mmStreamMetadataPropagatorInterceptor.defaultExpectation.paramPtrs == nil {
		mmStreamMetadataPropagatorInterceptor.defaultExpectation.paramPtrs = &MetadataPropagatorMockStreamMetadataPropagatorInterceptorParamPtrs{}
	}
	mmStreamMetadataPropagatorInterceptor.defaultExpectation.paramPtrs.desc = &desc
	mmStreamMetadataPropagatorInterceptor.defaultExpectation.expectationOrigins.originDesc = minimock.CallerInfo(1)

	return mmStreamMetadataPropagatorInterceptor
}

// ExpectCcParam3 sets up expected param cc for MetadataPropagator.StreamMetadataPropagatorInterceptor
func (mmStreamMetadataPropagatorInterceptor *mMetadataPropagatorMockStreamMetadataPropagatorInterceptor) ExpectCcParam3(cc *grpc.ClientConn) *mMetadataPropagatorMockStreamMetadataPropagatorInterceptor {
	if mmStreamMetadataPropagatorInterceptor.mock.funcStreamMetadataPropagatorInterceptor != nil {
		mmStreamMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.StreamMetadataPropagatorInterceptor mock is already set by Set")
	}

	if mmStreamMetadataPropagatorInterceptor.defaultExpectation == nil {
		mmStreamMetadataPropagatorInterceptor.defaultExpectation = &MetadataPropagatorMockStreamMetadataPropagatorInterceptorExpectation{}
	}

	if mmStreamMetadataPropagatorInterceptor.defaultExpectation.params != nil {
		mmStreamMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.StreamMetadataPropagatorInterceptor mock is already set by Expect")
	}

	if mmStreamMetadataPropagatorInterceptor.defaultExpectation.paramPtrs == nil {
		mmStreamMetadataPropagatorInterceptor.defaultExpectation.paramPtrs = &MetadataPropagatorMockStreamMetadataPropagatorInterceptorParamPtrs{}
	}
	mmStreamMetadataPropagatorInterceptor.defaultExpectation.paramPtrs.cc = &cc
	mmStreamMetadataPropagatorInterceptor.defaultExpectation.expectationOrigins.originCc = minimock.CallerInfo(1)

	return mmStreamMetadataPropagatorInterceptor
}

// ExpectMethodParam4 sets up expected param method for MetadataPropagator.StreamMetadataPropagatorInterceptor
func (mmStreamMetadataPropagatorInterceptor *mMetadataPropagatorMockStreamMetadataPropagatorInterceptor) ExpectMethodParam4(method string) *mMetadataPropagatorMockStreamMetadataPropagatorInterceptor {
	if mmStreamMetadataPropagatorInterceptor.mock.funcStreamMetadataPropagatorInterceptor != nil {
		mmStreamMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.StreamMetadataPropagatorInterceptor mock is already set by Set")
	}

	if mmStreamMetadataPropagatorInterceptor.defaultExpectation == nil {
		mmStreamMetadataPropagatorInterceptor.defaultExpectation = &MetadataPropagatorMockStreamMetadataPropagatorInterceptorExpectation{}
	}

	if mmStreamMetadataPropagatorInterceptor.defaultExpectation.params != nil {
		mmStreamMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.StreamMetadataPropagatorInterceptor mock is already set by Expect")
	}

	if mmStreamMetadataPropagatorInterceptor.defaultExpectation.paramPtrs == nil {
		mmStreamMetadataPropagatorInterceptor.defaultExpectation.paramPtrs = &MetadataPropagatorMockStreamMetadataPropagatorInterceptorParamPtrs{}
	}
	mmStreamMetadataPropagatorInterceptor.defaultExpectation.paramPtrs.method = &method
	mmStreamMetadataPropagatorInterceptor.defaultExpectation.expectationOrigins.originMethod = minimock.CallerInfo(1)

	return mmStreamMetadataPropagatorInterceptor
}

// ExpectStreamerParam5 sets up expected param streamer for MetadataPropagator.StreamMetadataPropagatorInterceptor
func (mmStreamMetadataPropagatorInterceptor *mMetadataPropagatorMockStreamMetadataPropagatorInterceptor) ExpectStreamerParam5(streamer grpc.Streamer) *mMetadataPropagatorMockStreamMetadataPropagatorInterceptor {
	if mmStreamMetadataPropagatorInterceptor.mock.funcStreamMetadataPropagatorInterceptor != nil {
		mmStreamMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.StreamMetadataPropagatorInterceptor mock is already set by Set")
	}

	if mmStreamMetadataPropagatorInterceptor.defaultExpectation == nil {
		mmStreamMetadataPropagatorInterceptor.defaultExpectation = &MetadataPropagatorMockStreamMetadataPropagatorInterceptorExpectation{}
	}

	if mmStreamMetadataPropagatorInterceptor.defaultExpectation.params != nil {
		mmStreamMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.StreamMetadataPropagatorInterceptor mock is already set by Expect")
	}

	if mmStreamMetadataPropagatorInterceptor.defaultExpectation.paramPtrs == nil {
		mmStreamMetadataPropagatorInterceptor.defaultExpectation.paramPtrs = &MetadataPropagatorMockStreamMetadataPropagatorInterceptorParamPtrs{}
	}
	mmStreamMetadataPropagatorInterceptor.defaultExpectation.paramPtrs.streamer = &streamer
	mmStreamMetadataPropagatorInterceptor.defaultExpectation.expectationOrigins.originStreamer = minimock.CallerInfo(1)

	return mmStreamMetadataPropagatorInterceptor
}

// ExpectOptsParam6 sets up expected param opts for MetadataPropagator.StreamMetadataPropagatorInterceptor
func (mmStreamMetadataPropagatorInterceptor *mMetadataPropagatorMockStreamMetadataPropagatorInterceptor) ExpectOptsParam6(opts ...grpc.CallOption) *mMetadataPropagatorMockStreamMetadataPropagatorInterceptor {
	if mmStreamMetadataPropagatorInterceptor.mock.funcStreamMetadataPropagatorInterceptor != nil {
		mmStreamMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.StreamMetadataPropagatorInterceptor mock is already set by Set")
	}

	if mmStreamMetadataPropagatorInterceptor.defaultExpectation == nil {
		mmStreamMetadataPropagatorInterceptor.defaultExpectation = &MetadataPropagatorMockStreamMetadataPropagatorInterceptorExpectation{}
	}

	if mmStreamMetadataPropagatorInterceptor.defaultExpectation.params != nil {
		mmStreamMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.StreamMetadataPropagatorInterceptor mock is already set by Expect")
	}

	if mmStreamMetadataPropagatorInterceptor.defaultExpectation.paramPtrs == nil {
		mmStreamMetadataPropagatorInterceptor.defaultExpectation.paramPtrs = &MetadataPropagatorMockStreamMetadataPropagatorInterceptorParamPtrs{}
	}
	mmStreamMetadataPropagatorInterceptor.defaultExpectation.paramPtrs.opts = &opts
	mmStreamMetadataPropagatorInterceptor.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmStreamMetadataPropagatorInterceptor
}

// Inspect accepts an inspector function that has same arguments as the MetadataPropagator.StreamMetadataPropagatorInterceptor
func (mmStreamMetadataPropagatorInterceptor *mMetadataPropagatorMockStreamMetadataPropagatorInterceptor) Inspect(f func(ctx context.Context, desc *grpc.StreamDesc, cc *grpc.ClientConn, method string, streamer grpc.Streamer, opts ...grpc.CallOption)) *mMetadataPropagatorMockStreamMetadataPropagatorInterceptor {
	if mmStreamMetadataPropagatorInterceptor.mock.inspectFuncStreamMetadataPropagatorInterceptor != nil {
		mmStreamMetadataPropagatorInterceptor.mock.t.Fatalf("Inspect function is already set for MetadataPropagatorMock.StreamMetadataPropagatorInterceptor")
	}

	mmStreamMetadataPropagatorInterceptor.mock.inspectFuncStreamMetadataPropagatorInterceptor = f

	return mmStreamMetadataPropagatorInterceptor
}

// Return sets up results that will be returned by MetadataPropagator.StreamMetadataPropagatorInterceptor
func (mmStreamMetadataPropagatorInterceptor *mMetadataPropagatorMockStreamMetadataPropagatorInterceptor) Return(c2 grpc.ClientStream, err error) *MetadataPropagatorMock {
	if mmStreamMetadataPropagatorInterceptor.mock.funcStreamMetadataPropagatorInterceptor != nil {
		mmStreamMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.StreamMetadataPropagatorInterceptor mock is already set by Set")
	}

	if mmStreamMetadataPropagatorInterceptor.defaultExpectation == nil {
		mmStreamMetadataPropagatorInterceptor.defaultExpectation = &MetadataPropagatorMockStreamMetadataPropagatorInterceptorExpectation{mock: mmStreamMetadataPropagatorInterceptor.mock}
	}
	mmStreamMetadataPropagatorInterceptor.defaultExpectation.results = &MetadataPropagatorMockStreamMetadataPropagatorInterceptorResults{c2, err}
	mmStreamMetadataPropagatorInterceptor.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmStreamMetadataPropagatorInterceptor.mock
}

// Set uses given function f to mock the MetadataPropagator.StreamMetadataPropagatorInterceptor method
func (mmStreamMetadataPropagatorInterceptor *mMetadataPropagatorMockStreamMetadataPropagatorInterceptor) Set(f func(ctx context.Context, desc *grpc.StreamDesc, cc *grpc.ClientConn, method string, streamer grpc.Streamer, opts ...grpc.CallOption) (c2 grpc.ClientStream, err error)) *MetadataPropagatorMock {
	if mmStreamMetadataPropagatorInterceptor.defaultExpectation != nil {
		mmStreamMetadataPropagatorInterceptor.mock.t.Fatalf("Default expectation is already set for the MetadataPropagator.StreamMetadataPropagatorInterceptor method")
	}

	if len(mmStreamMetadataPropagatorInterceptor.expectations) > 0 {
		mmStreamMetadataPropagatorInterceptor.mock.t.Fatalf("Some expectations are already set for the MetadataPropagator.StreamMetadataPropagatorInterceptor method")
	}

	mmStreamMetadataPropagatorInterceptor.mock.funcStreamMetadataPropagatorInterceptor = f
	mmStreamMetadataPropagatorInterceptor.mock.funcStreamMetadataPropagatorInterceptorOrigin = minimock.CallerInfo(1)
	return mmStreamMetadataPropagatorInterceptor.mock
}

// When sets expectation for the MetadataPropagator.StreamMetadataPropagatorInterceptor which will trigger the result defined by the following
// Then helper
func (mmStreamMetadataPropagatorInterceptor *mMetadataPropagatorMockStreamMetadataPropagatorInterceptor) When(ctx context.Context, desc *grpc.StreamDesc, cc *grpc.ClientConn, method string, streamer grpc.Streamer, opts ...grpc.CallOption) *MetadataPropagatorMockStreamMetadataPropagatorInterceptorExpectation {
	if mmStreamMetadataPropagatorInterceptor.mock.funcStreamMetadataPropagatorInterceptor != nil {
		mmStreamMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.StreamMetadataPropagatorInterceptor mock is already set by Set")
	}

	expectation := &MetadataPropagatorMockStreamMetadataPropagatorInterceptorExpectation{
		mock:               mmStreamMetadataPropagatorInterceptor.mock,
		params:             &MetadataPropagatorMockStreamMetadataPropagatorInterceptorParams{ctx, desc, cc, method, streamer, opts},
		expectationOrigins: MetadataPropagatorMockStreamMetadataPropagatorInterceptorExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmStreamMetadataPropagatorInterceptor.expectations = append(mmStreamMetadataPropagatorInterceptor.expectations, expectation)
	return expectation
}

// Then sets up MetadataPropagator.StreamMetadataPropagatorInterceptor return parameters for the expectation previously defined by the When method
func (e *MetadataPropagatorMockStreamMetadataPropagatorInterceptorExpectation) Then(c2 grpc.ClientStream, err error) *MetadataPropagatorMock {
	e.results = &MetadataPropagatorMockStreamMetadataPropagatorInterceptorResults{c2, err}
	return e.mock
}

// Times sets number of times MetadataPropagator.StreamMetadataPropagatorInterceptor should be invoked
func (mmStreamMetadataPropagatorInterceptor *mMetadataPropagatorMockStreamMetadataPropagatorInterceptor) Times(n uint64) *mMetadataPropagatorMockStreamMetadataPropagatorInterceptor {
	if n == 0 {
		mmStreamMetadataPropagatorInterceptor.mock.t.Fatalf("Times of MetadataPropagatorMock.StreamMetadataPropagatorInterceptor mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmStreamMetadataPropagatorInterceptor.expectedInvocations, n)
	mmStreamMetadataPropagatorInterceptor.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmStreamMetadataPropagatorInterceptor
}

func (mmStreamMetadataPropagatorInterceptor *mMetadataPropagatorMockStreamMetadataPropagatorInterceptor) invocationsDone() bool {
	if len(mmStreamMetadataPropagatorInterceptor.expectations) == 0 && mmStreamMetadataPropagatorInterceptor.defaultExpectation == nil && mmStreamMetadataPropagatorInterceptor.mock.funcStreamMetadataPropagatorInterceptor == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmStreamMetadataPropagatorInterceptor.mock.afterStreamMetadataPropagatorInterceptorCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmStreamMetadataPropagatorInterceptor.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// StreamMetadataPropagatorInterceptor implements MetadataPropagator
func (mmStreamMetadataPropagatorInterceptor *MetadataPropagatorMock) StreamMetadataPropagatorInterceptor(ctx context.Context, desc *grpc.StreamDesc, cc *grpc.ClientConn, method string, streamer grpc.Streamer, opts ...grpc.CallOption) (c2 grpc.ClientStream, err error) {
	mm_atomic.AddUint64(&mmStreamMetadataPropagatorInterceptor.beforeStreamMetadataPropagatorInterceptorCounter, 1)
	defer mm_atomic.AddUint64(&mmStreamMetadataPropagatorInterceptor.afterStreamMetadataPropagatorInterceptorCounter, 1)

	mmStreamMetadataPropagatorInterceptor.t.Helper()

	if mmStreamMetadataPropagatorInterceptor.inspectFuncStreamMetadataPropagatorInterceptor != nil {
		mmStreamMetadataPropagatorInterceptor.inspectFuncStreamMetadataPropagatorInterceptor(ctx, desc, cc, method, streamer, opts...)
	}

	mm_params := MetadataPropagatorMockStreamMetadataPropagatorInterceptorParams{ctx, desc, cc, method, streamer, opts}

	// Record call args
	mmStreamMetadataPropagatorInterceptor.StreamMetadataPropagatorInterceptorMock.mutex.Lock()
	mmStreamMetadataPropagatorInterceptor.StreamMetadataPropagatorInterceptorMock.callArgs = append(mmStreamMetadataPropagatorInterceptor.StreamMetadataPropagatorInterceptorMock.callArgs, &mm_params)
	mmStreamMetadataPropagatorInterceptor.StreamMetadataPropagatorInterceptorMock.mutex.Unlock()

	for _, e := range mmStreamMetadataPropagatorInterceptor.StreamMetadataPropagatorInterceptorMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.c2, e.results.err
		}
	}

	if mmStreamMetadataPropagatorInterceptor.StreamMetadataPropagatorInterceptorMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStreamMetadataPropagatorInterceptor.StreamMetadataPropagatorInterceptorMock.defaultExpectation.Counter, 1)
		mm_want := mmStreamMetadataPropagatorInterceptor.StreamMetadataPropagatorInterceptorMock.defaultExpectation.params
		mm_want_ptrs := mmStreamMetadataPropagatorInterceptor.StreamMetadataPropagatorInterceptorMock.defaultExpectation.paramPtrs

		mm_got := MetadataPropagatorMockStreamMetadataPropagatorInterceptorParams{ctx, desc, cc, method, streamer, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmStreamMetadataPropagatorInterceptor.t.Errorf("MetadataPropagatorMock.StreamMetadataPropagatorInterceptor got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmStreamMetadataPropagatorInterceptor.StreamMetadataPropagatorInterceptorMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.desc != nil && !minimock.Equal(*mm_want_ptrs.desc, mm_got.desc) {
				mmStreamMetadataPropagatorInterceptor.t.Errorf("MetadataPropagatorMock.StreamMetadataPropagatorInterceptor got unexpected parameter desc, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmStreamMetadataPropagatorInterceptor.StreamMetadataPropagatorInterceptorMock.defaultExpectation.expectationOrigins.originDesc, *mm_want_ptrs.desc, mm_got.desc, minimock.Diff(*mm_want_ptrs.desc, mm_got.desc))
			}

			if mm_want_ptrs.cc != nil && !minimock.Equal(*mm_want_ptrs.cc, mm_got.cc) {
				mmStreamMetadataPropagatorInterceptor.t.Errorf("MetadataPropagatorMock.StreamMetadataPropagatorInterceptor got unexpected parameter cc, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmStreamMetadataPropagatorInterceptor.StreamMetadataPropagatorInterceptorMock.defaultExpectation.expectationOrigins.originCc, *mm_want_ptrs.cc, mm_got.cc, minimock.Diff(*mm_want_ptrs.cc, mm_got.cc))
			}

			if mm_want_ptrs.method != nil && !minimock.Equal(*mm_want_ptrs.method, mm_got.method) {
				mmStreamMetadataPropagatorInterceptor.t.Errorf("MetadataPropagatorMock.StreamMetadataPropagatorInterceptor got unexpected parameter method, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmStreamMetadataPropagatorInterceptor.StreamMetadataPropagatorInterceptorMock.defaultExpectation.expectationOrigins.originMethod, *mm_want_ptrs.method, mm_got.method, minimock.Diff(*mm_want_ptrs.method, mm_got.method))
			}

			if mm_want_ptrs.streamer != nil && !minimock.Equal(*mm_want_ptrs.streamer, mm_got.streamer) {
				mmStreamMetadataPropagatorInterceptor.t.Errorf("MetadataPropagatorMock.StreamMetadataPropagatorInterceptor got unexpected parameter streamer, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmStreamMetadataPropagatorInterceptor.StreamMetadataPropagatorInterceptorMock.defaultExpectation.expectationOrigins.originStreamer, *mm_want_ptrs.streamer, mm_got.streamer, minimock.Diff(*mm_want_ptrs.streamer, mm_got.streamer))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmStreamMetadataPropagatorInterceptor.t.Errorf("MetadataPropagatorMock.StreamMetadataPropagatorInterceptor got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmStreamMetadataPropagatorInterceptor.StreamMetadataPropagatorInterceptorMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmStreamMetadataPropagatorInterceptor.t.Errorf("MetadataPropagatorMock.StreamMetadataPropagatorInterceptor got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmStreamMetadataPropagatorInterceptor.StreamMetadataPropagatorInterceptorMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmStreamMetadataPropagatorInterceptor.StreamMetadataPropagatorInterceptorMock.defaultExpectation.results
		if mm_results == nil {
			mmStreamMetadataPropagatorInterceptor.t.Fatal("No results are set for the MetadataPropagatorMock.StreamMetadataPropagatorInterceptor")
		}
		return (*mm_results).c2, (*mm_results).err
	}
	if mmStreamMetadataPropagatorInterceptor.funcStreamMetadataPropagatorInterceptor != nil {
		return mmStreamMetadataPropagatorInterceptor.funcStreamMetadataPropagatorInterceptor(ctx, desc, cc, method, streamer, opts...)
	}
	mmStreamMetadataPropagatorInterceptor.t.Fatalf("Unexpected call to MetadataPropagatorMock.StreamMetadataPropagatorInterceptor. %v %v %v %v %v %v", ctx, desc, cc, method, streamer, opts)
	return
}

// StreamMetadataPropagatorInterceptorAfterCounter returns a count of finished MetadataPropagatorMock.StreamMetadataPropagatorInterceptor invocations
func (mmStreamMetadataPropagatorInterceptor *MetadataPropagatorMock) StreamMetadataPropagatorInterceptorAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStreamMetadataPropagatorInterceptor.afterStreamMetadataPropagatorInterceptorCounter)
}

// StreamMetadataPropagatorInterceptorBeforeCounter returns a count of MetadataPropagatorMock.StreamMetadataPropagatorInterceptor invocations
func (mmStreamMetadataPropagatorInterceptor *MetadataPropagatorMock) StreamMetadataPropagatorInterceptorBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStreamMetadataPropagatorInterceptor.beforeStreamMetadataPropagatorInterceptorCounter)
}

// Calls returns a list of arguments used in each call to MetadataPropagatorMock.StreamMetadataPropagatorInterceptor.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmStreamMetadataPropagatorInterceptor *mMetadataPropagatorMockStreamMetadataPropagatorInterceptor) Calls() []*MetadataPropagatorMockStreamMetadataPropagatorInterceptorParams {
	mmStreamMetadataPropagatorInterceptor.mutex.RLock()

	argCopy := make([]*MetadataPropagatorMockStreamMetadataPropagatorInterceptorParams, len(mmStreamMetadataPropagatorInterceptor.callArgs))
	copy(argCopy, mmStreamMetadataPropagatorInterceptor.callArgs)

	mmStreamMetadataPropagatorInterceptor.mutex.RUnlock()

	return argCopy
}

// MinimockStreamMetadataPropagatorInterceptorDone returns true if the count of the StreamMetadataPropagatorInterceptor invocations corresponds
// the number of defined expectations
func (m *MetadataPropagatorMock) MinimockStreamMetadataPropagatorInterceptorDone() bool {
	if m.StreamMetadataPropagatorInterceptorMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.StreamMetadataPropagatorInterceptorMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.StreamMetadataPropagatorInterceptorMock.invocationsDone()
}

// MinimockStreamMetadataPropagatorInterceptorInspect logs each unmet expectation
func (m *MetadataPropagatorMock) MinimockStreamMetadataPropagatorInterceptorInspect() {
	for _, e := range m.StreamMetadataPropagatorInterceptorMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MetadataPropagatorMock.StreamMetadataPropagatorInterceptor at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterStreamMetadataPropagatorInterceptorCounter := mm_atomic.LoadUint64(&m.afterStreamMetadataPropagatorInterceptorCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.StreamMetadataPropagatorInterceptorMock.defaultExpectation != nil && afterStreamMetadataPropagatorInterceptorCounter < 1 {
		if m.StreamMetadataPropagatorInterceptorMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to MetadataPropagatorMock.StreamMetadataPropagatorInterceptor at\n%s", m.StreamMetadataPropagatorInterceptorMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to MetadataPropagatorMock.StreamMetadataPropagatorInterceptor at\n%s with params: %#v", m.StreamMetadataPropagatorInterceptorMock.defaultExpectation.expectationOrigins.origin, *m.StreamMetadataPropagatorInterceptorMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStreamMetadataPropagatorInterceptor != nil && afterStreamMetadataPropagatorInterceptorCounter < 1 {
		m.t.Errorf("Expected call to MetadataPropagatorMock.StreamMetadataPropagatorInterceptor at\n%s", m.funcStreamMetadataPropagatorInterceptorOrigin)
	}

	if !m.StreamMetadataPropagatorInterceptorMock.invocationsDone() && afterStreamMetadataPropagatorInterceptorCounter > 0 {
		m.t.Errorf("Expected %d calls to MetadataPropagatorMock.StreamMetadataPropagatorInterceptor at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.StreamMetadataPropagatorInterceptorMock.expectedInvocations), m.StreamMetadataPropagatorInterceptorMock.expectedInvocationsOrigin, afterStreamMetadataPropagatorInterceptorCounter)
	}
}

type mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor struct {
	optional           bool
	mock               *MetadataPropagatorMock
	defaultExpectation *MetadataPropagatorMockUnaryMetadataPropagatorInterceptorExpectation
	expectations       []*MetadataPropagatorMockUnaryMetadataPropagatorInterceptorExpectation

	callArgs []*MetadataPropagatorMockUnaryMetadataPropagatorInterceptorParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// MetadataPropagatorMockUnaryMetadataPropagatorInterceptorExpectation specifies expectation struct of the MetadataPropagator.UnaryMetadataPropagatorInterceptor
type MetadataPropagatorMockUnaryMetadataPropagatorInterceptorExpectation struct {
	mock               *MetadataPropagatorMock
	params             *MetadataPropagatorMockUnaryMetadataPropagatorInterceptorParams
	paramPtrs          *MetadataPropagatorMockUnaryMetadataPropagatorInterceptorParamPtrs
	expectationOrigins MetadataPropagatorMockUnaryMetadataPropagatorInterceptorExpectationOrigins
	results            *MetadataPropagatorMockUnaryMetadataPropagatorInterceptorResults
	returnOrigin       string
	Counter            uint64
}

// MetadataPropagatorMockUnaryMetadataPropagatorInterceptorParams contains parameters of the MetadataPropagator.UnaryMetadataPropagatorInterceptor
type MetadataPropagatorMockUnaryMetadataPropagatorInterceptorParams struct {
	ctx     context.Context
	method  string
	req     any
	reply   any
	cc      *grpc.ClientConn
	invoker grpc.UnaryInvoker
	opts    []grpc.CallOption
}

// MetadataPropagatorMockUnaryMetadataPropagatorInterceptorParamPtrs contains pointers to parameters of the MetadataPropagator.UnaryMetadataPropagatorInterceptor
type MetadataPropagatorMockUnaryMetadataPropagatorInterceptorParamPtrs struct {
	ctx     *context.Context
	method  *string
	req     *any
	reply   *any
	cc      **grpc.ClientConn
	invoker *grpc.UnaryInvoker
	opts    *[]grpc.CallOption
}

// MetadataPropagatorMockUnaryMetadataPropagatorInterceptorResults contains results of the MetadataPropagator.UnaryMetadataPropagatorInterceptor
type MetadataPropagatorMockUnaryMetadataPropagatorInterceptorResults struct {
	err error
}

// MetadataPropagatorMockUnaryMetadataPropagatorInterceptorOrigins contains origins of expectations of the MetadataPropagator.UnaryMetadataPropagatorInterceptor
type MetadataPropagatorMockUnaryMetadataPropagatorInterceptorExpectationOrigins struct {
	origin        string
	originCtx     string
	originMethod  string
	originReq     string
	originReply   string
	originCc      string
	originInvoker string
	originOpts    string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUnaryMetadataPropagatorInterceptor *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor) Optional() *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor {
	mmUnaryMetadataPropagatorInterceptor.optional = true
	return mmUnaryMetadataPropagatorInterceptor
}

// Expect sets up expected params for MetadataPropagator.UnaryMetadataPropagatorInterceptor
func (mmUnaryMetadataPropagatorInterceptor *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor) Expect(ctx context.Context, method string, req any, reply any, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor {
	if mmUnaryMetadataPropagatorInterceptor.mock.funcUnaryMetadataPropagatorInterceptor != nil {
		mmUnaryMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor mock is already set by Set")
	}

	if mmUnaryMetadataPropagatorInterceptor.defaultExpectation == nil {
		mmUnaryMetadataPropagatorInterceptor.defaultExpectation = &MetadataPropagatorMockUnaryMetadataPropagatorInterceptorExpectation{}
	}

	if mmUnaryMetadataPropagatorInterceptor.defaultExpectation.paramPtrs != nil {
		mmUnaryMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor mock is already set by ExpectParams functions")
	}

	mmUnaryMetadataPropagatorInterceptor.defaultExpectation.params = &MetadataPropagatorMockUnaryMetadataPropagatorInterceptorParams{ctx, method, req, reply, cc, invoker, opts}
	mmUnaryMetadataPropagatorInterceptor.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUnaryMetadataPropagatorInterceptor.expectations {
		if minimock.Equal(e.params, mmUnaryMetadataPropagatorInterceptor.defaultExpectation.params) {
			mmUnaryMetadataPropagatorInterceptor.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUnaryMetadataPropagatorInterceptor.defaultExpectation.params)
		}
	}

	return mmUnaryMetadataPropagatorInterceptor
}

// ExpectCtxParam1 sets up expected param ctx for MetadataPropagator.UnaryMetadataPropagatorInterceptor
func (mmUnaryMetadataPropagatorInterceptor *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor) ExpectCtxParam1(ctx context.Context) *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor {
	if mmUnaryMetadataPropagatorInterceptor.mock.funcUnaryMetadataPropagatorInterceptor != nil {
		mmUnaryMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor mock is already set by Set")
	}

	if mmUnaryMetadataPropagatorInterceptor.defaultExpectation == nil {
		mmUnaryMetadataPropagatorInterceptor.defaultExpectation = &MetadataPropagatorMockUnaryMetadataPropagatorInterceptorExpectation{}
	}

	if mmUnaryMetadataPropagatorInterceptor.defaultExpectation.params != nil {
		mmUnaryMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor mock is already set by Expect")
	}

	if mmUnaryMetadataPropagatorInterceptor.defaultExpectation.paramPtrs == nil {
		mmUnaryMetadataPropagatorInterceptor.defaultExpectation.paramPtrs = &MetadataPropagatorMockUnaryMetadataPropagatorInterceptorParamPtrs{}
	}
	mmUnaryMetadataPropagatorInterceptor.defaultExpectation.paramPtrs.ctx = &ctx
	mmUnaryMetadataPropagatorInterceptor.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUnaryMetadataPropagatorInterceptor
}

// ExpectMethodParam2 sets up expected param method for MetadataPropagator.UnaryMetadataPropagatorInterceptor
func (mmUnaryMetadataPropagatorInterceptor *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor) ExpectMethodParam2(method string) *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor {
	if mmUnaryMetadataPropagatorInterceptor.mock.funcUnaryMetadataPropagatorInterceptor != nil {
		mmUnaryMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor mock is already set by Set")
	}

	if mmUnaryMetadataPropagatorInterceptor.defaultExpectation == nil {
		mmUnaryMetadataPropagatorInterceptor.defaultExpectation = &MetadataPropagatorMockUnaryMetadataPropagatorInterceptorExpectation{}
	}

	if mmUnaryMetadataPropagatorInterceptor.defaultExpectation.params != nil {
		mmUnaryMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor mock is already set by Expect")
	}

	if mmUnaryMetadataPropagatorInterceptor.defaultExpectation.paramPtrs == nil {
		mmUnaryMetadataPropagatorInterceptor.defaultExpectation.paramPtrs = &MetadataPropagatorMockUnaryMetadataPropagatorInterceptorParamPtrs{}
	}
	mmUnaryMetadataPropagatorInterceptor.defaultExpectation.paramPtrs.method = &method
	mmUnaryMetadataPropagatorInterceptor.defaultExpectation.expectationOrigins.originMethod = minimock.CallerInfo(1)

	return mmUnaryMetadataPropagatorInterceptor
}

// ExpectReqParam3 sets up expected param req for MetadataPropagator.UnaryMetadataPropagatorInterceptor
func (mmUnaryMetadataPropagatorInterceptor *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor) ExpectReqParam3(req any) *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor {
	if mmUnaryMetadataPropagatorInterceptor.mock.funcUnaryMetadataPropagatorInterceptor != nil {
		mmUnaryMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor mock is already set by Set")
	}

	if mmUnaryMetadataPropagatorInterceptor.defaultExpectation == nil {
		mmUnaryMetadataPropagatorInterceptor.defaultExpectation = &MetadataPropagatorMockUnaryMetadataPropagatorInterceptorExpectation{}
	}

	if mmUnaryMetadataPropagatorInterceptor.defaultExpectation.params != nil {
		mmUnaryMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor mock is already set by Expect")
	}

	if mmUnaryMetadataPropagatorInterceptor.defaultExpectation.paramPtrs == nil {
		mmUnaryMetadataPropagatorInterceptor.defaultExpectation.paramPtrs = &MetadataPropagatorMockUnaryMetadataPropagatorInterceptorParamPtrs{}
	}
	mmUnaryMetadataPropagatorInterceptor.defaultExpectation.paramPtrs.req = &req
	mmUnaryMetadataPropagatorInterceptor.defaultExpectation.expectationOrigins.originReq = minimock.CallerInfo(1)

	return mmUnaryMetadataPropagatorInterceptor
}

// ExpectReplyParam4 sets up expected param reply for MetadataPropagator.UnaryMetadataPropagatorInterceptor
func (mmUnaryMetadataPropagatorInterceptor *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor) ExpectReplyParam4(reply any) *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor {
	if mmUnaryMetadataPropagatorInterceptor.mock.funcUnaryMetadataPropagatorInterceptor != nil {
		mmUnaryMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor mock is already set by Set")
	}

	if mmUnaryMetadataPropagatorInterceptor.defaultExpectation == nil {
		mmUnaryMetadataPropagatorInterceptor.defaultExpectation = &MetadataPropagatorMockUnaryMetadataPropagatorInterceptorExpectation{}
	}

	if mmUnaryMetadataPropagatorInterceptor.defaultExpectation.params != nil {
		mmUnaryMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor mock is already set by Expect")
	}

	if mmUnaryMetadataPropagatorInterceptor.defaultExpectation.paramPtrs == nil {
		mmUnaryMetadataPropagatorInterceptor.defaultExpectation.paramPtrs = &MetadataPropagatorMockUnaryMetadataPropagatorInterceptorParamPtrs{}
	}
	mmUnaryMetadataPropagatorInterceptor.defaultExpectation.paramPtrs.reply = &reply
	mmUnaryMetadataPropagatorInterceptor.defaultExpectation.expectationOrigins.originReply = minimock.CallerInfo(1)

	return mmUnaryMetadataPropagatorInterceptor
}

// ExpectCcParam5 sets up expected param cc for MetadataPropagator.UnaryMetadataPropagatorInterceptor
func (mmUnaryMetadataPropagatorInterceptor *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor) ExpectCcParam5(cc *grpc.ClientConn) *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor {
	if mmUnaryMetadataPropagatorInterceptor.mock.funcUnaryMetadataPropagatorInterceptor != nil {
		mmUnaryMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor mock is already set by Set")
	}

	if mmUnaryMetadataPropagatorInterceptor.defaultExpectation == nil {
		mmUnaryMetadataPropagatorInterceptor.defaultExpectation = &MetadataPropagatorMockUnaryMetadataPropagatorInterceptorExpectation{}
	}

	if mmUnaryMetadataPropagatorInterceptor.defaultExpectation.params != nil {
		mmUnaryMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor mock is already set by Expect")
	}

	if mmUnaryMetadataPropagatorInterceptor.defaultExpectation.paramPtrs == nil {
		mmUnaryMetadataPropagatorInterceptor.defaultExpectation.paramPtrs = &MetadataPropagatorMockUnaryMetadataPropagatorInterceptorParamPtrs{}
	}
	mmUnaryMetadataPropagatorInterceptor.defaultExpectation.paramPtrs.cc = &cc
	mmUnaryMetadataPropagatorInterceptor.defaultExpectation.expectationOrigins.originCc = minimock.CallerInfo(1)

	return mmUnaryMetadataPropagatorInterceptor
}

// ExpectInvokerParam6 sets up expected param invoker for MetadataPropagator.UnaryMetadataPropagatorInterceptor
func (mmUnaryMetadataPropagatorInterceptor *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor) ExpectInvokerParam6(invoker grpc.UnaryInvoker) *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor {
	if mmUnaryMetadataPropagatorInterceptor.mock.funcUnaryMetadataPropagatorInterceptor != nil {
		mmUnaryMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor mock is already set by Set")
	}

	if mmUnaryMetadataPropagatorInterceptor.defaultExpectation == nil {
		mmUnaryMetadataPropagatorInterceptor.defaultExpectation = &MetadataPropagatorMockUnaryMetadataPropagatorInterceptorExpectation{}
	}

	if mmUnaryMetadataPropagatorInterceptor.defaultExpectation.params != nil {
		mmUnaryMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor mock is already set by Expect")
	}

	if mmUnaryMetadataPropagatorInterceptor.defaultExpectation.paramPtrs == nil {
		mmUnaryMetadataPropagatorInterceptor.defaultExpectation.paramPtrs = &MetadataPropagatorMockUnaryMetadataPropagatorInterceptorParamPtrs{}
	}
	mmUnaryMetadataPropagatorInterceptor.defaultExpectation.paramPtrs.invoker = &invoker
	mmUnaryMetadataPropagatorInterceptor.defaultExpectation.expectationOrigins.originInvoker = minimock.CallerInfo(1)

	return mmUnaryMetadataPropagatorInterceptor
}

// ExpectOptsParam7 sets up expected param opts for MetadataPropagator.UnaryMetadataPropagatorInterceptor
func (mmUnaryMetadataPropagatorInterceptor *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor) ExpectOptsParam7(opts ...grpc.CallOption) *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor {
	if mmUnaryMetadataPropagatorInterceptor.mock.funcUnaryMetadataPropagatorInterceptor != nil {
		mmUnaryMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor mock is already set by Set")
	}

	if mmUnaryMetadataPropagatorInterceptor.defaultExpectation == nil {
		mmUnaryMetadataPropagatorInterceptor.defaultExpectation = &MetadataPropagatorMockUnaryMetadataPropagatorInterceptorExpectation{}
	}

	if mmUnaryMetadataPropagatorInterceptor.defaultExpectation.params != nil {
		mmUnaryMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor mock is already set by Expect")
	}

	if mmUnaryMetadataPropagatorInterceptor.defaultExpectation.paramPtrs == nil {
		mmUnaryMetadataPropagatorInterceptor.defaultExpectation.paramPtrs = &MetadataPropagatorMockUnaryMetadataPropagatorInterceptorParamPtrs{}
	}
	mmUnaryMetadataPropagatorInterceptor.defaultExpectation.paramPtrs.opts = &opts
	mmUnaryMetadataPropagatorInterceptor.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmUnaryMetadataPropagatorInterceptor
}

// Inspect accepts an inspector function that has same arguments as the MetadataPropagator.UnaryMetadataPropagatorInterceptor
func (mmUnaryMetadataPropagatorInterceptor *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor) Inspect(f func(ctx context.Context, method string, req any, reply any, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption)) *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor {
	if mmUnaryMetadataPropagatorInterceptor.mock.inspectFuncUnaryMetadataPropagatorInterceptor != nil {
		mmUnaryMetadataPropagatorInterceptor.mock.t.Fatalf("Inspect function is already set for MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor")
	}

	mmUnaryMetadataPropagatorInterceptor.mock.inspectFuncUnaryMetadataPropagatorInterceptor = f

	return mmUnaryMetadataPropagatorInterceptor
}

// Return sets up results that will be returned by MetadataPropagator.UnaryMetadataPropagatorInterceptor
func (mmUnaryMetadataPropagatorInterceptor *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor) Return(err error) *MetadataPropagatorMock {
	if mmUnaryMetadataPropagatorInterceptor.mock.funcUnaryMetadataPropagatorInterceptor != nil {
		mmUnaryMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor mock is already set by Set")
	}

	if mmUnaryMetadataPropagatorInterceptor.defaultExpectation == nil {
		mmUnaryMetadataPropagatorInterceptor.defaultExpectation = &MetadataPropagatorMockUnaryMetadataPropagatorInterceptorExpectation{mock: mmUnaryMetadataPropagatorInterceptor.mock}
	}
	mmUnaryMetadataPropagatorInterceptor.defaultExpectation.results = &MetadataPropagatorMockUnaryMetadataPropagatorInterceptorResults{err}
	mmUnaryMetadataPropagatorInterceptor.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUnaryMetadataPropagatorInterceptor.mock
}

// Set uses given function f to mock the MetadataPropagator.UnaryMetadataPropagatorInterceptor method
func (mmUnaryMetadataPropagatorInterceptor *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor) Set(f func(ctx context.Context, method string, req any, reply any, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) (err error)) *MetadataPropagatorMock {
	if mmUnaryMetadataPropagatorInterceptor.defaultExpectation != nil {
		mmUnaryMetadataPropagatorInterceptor.mock.t.Fatalf("Default expectation is already set for the MetadataPropagator.UnaryMetadataPropagatorInterceptor method")
	}

	if len(mmUnaryMetadataPropagatorInterceptor.expectations) > 0 {
		mmUnaryMetadataPropagatorInterceptor.mock.t.Fatalf("Some expectations are already set for the MetadataPropagator.UnaryMetadataPropagatorInterceptor method")
	}

	mmUnaryMetadataPropagatorInterceptor.mock.funcUnaryMetadataPropagatorInterceptor = f
	mmUnaryMetadataPropagatorInterceptor.mock.funcUnaryMetadataPropagatorInterceptorOrigin = minimock.CallerInfo(1)
	return mmUnaryMetadataPropagatorInterceptor.mock
}

// When sets expectation for the MetadataPropagator.UnaryMetadataPropagatorInterceptor which will trigger the result defined by the following
// Then helper
func (mmUnaryMetadataPropagatorInterceptor *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor) When(ctx context.Context, method string, req any, reply any, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) *MetadataPropagatorMockUnaryMetadataPropagatorInterceptorExpectation {
	if mmUnaryMetadataPropagatorInterceptor.mock.funcUnaryMetadataPropagatorInterceptor != nil {
		mmUnaryMetadataPropagatorInterceptor.mock.t.Fatalf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor mock is already set by Set")
	}

	expectation := &MetadataPropagatorMockUnaryMetadataPropagatorInterceptorExpectation{
		mock:               mmUnaryMetadataPropagatorInterceptor.mock,
		params:             &MetadataPropagatorMockUnaryMetadataPropagatorInterceptorParams{ctx, method, req, reply, cc, invoker, opts},
		expectationOrigins: MetadataPropagatorMockUnaryMetadataPropagatorInterceptorExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUnaryMetadataPropagatorInterceptor.expectations = append(mmUnaryMetadataPropagatorInterceptor.expectations, expectation)
	return expectation
}

// Then sets up MetadataPropagator.UnaryMetadataPropagatorInterceptor return parameters for the expectation previously defined by the When method
func (e *MetadataPropagatorMockUnaryMetadataPropagatorInterceptorExpectation) Then(err error) *MetadataPropagatorMock {
	e.results = &MetadataPropagatorMockUnaryMetadataPropagatorInterceptorResults{err}
	return e.mock
}

// Times sets number of times MetadataPropagator.UnaryMetadataPropagatorInterceptor should be invoked
func (mmUnaryMetadataPropagatorInterceptor *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor) Times(n uint64) *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor {
	if n == 0 {
		mmUnaryMetadataPropagatorInterceptor.mock.t.Fatalf("Times of MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUnaryMetadataPropagatorInterceptor.expectedInvocations, n)
	mmUnaryMetadataPropagatorInterceptor.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUnaryMetadataPropagatorInterceptor
}

func (mmUnaryMetadataPropagatorInterceptor *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor) invocationsDone() bool {
	if len(mmUnaryMetadataPropagatorInterceptor.expectations) == 0 && mmUnaryMetadataPropagatorInterceptor.defaultExpectation == nil && mmUnaryMetadataPropagatorInterceptor.mock.funcUnaryMetadataPropagatorInterceptor == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUnaryMetadataPropagatorInterceptor.mock.afterUnaryMetadataPropagatorInterceptorCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUnaryMetadataPropagatorInterceptor.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UnaryMetadataPropagatorInterceptor implements MetadataPropagator
func (mmUnaryMetadataPropagatorInterceptor *MetadataPropagatorMock) UnaryMetadataPropagatorInterceptor(ctx context.Context, method string, req any, reply any, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) (err error) {
	mm_atomic.AddUint64(&mmUnaryMetadataPropagatorInterceptor.beforeUnaryMetadataPropagatorInterceptorCounter, 1)
	defer mm_atomic.AddUint64(&mmUnaryMetadataPropagatorInterceptor.afterUnaryMetadataPropagatorInterceptorCounter, 1)

	mmUnaryMetadataPropagatorInterceptor.t.Helper()

	if mmUnaryMetadataPropagatorInterceptor.inspectFuncUnaryMetadataPropagatorInterceptor != nil {
		mmUnaryMetadataPropagatorInterceptor.inspectFuncUnaryMetadataPropagatorInterceptor(ctx, method, req, reply, cc, invoker, opts...)
	}

	mm_params := MetadataPropagatorMockUnaryMetadataPropagatorInterceptorParams{ctx, method, req, reply, cc, invoker, opts}

	// Record call args
	mmUnaryMetadataPropagatorInterceptor.UnaryMetadataPropagatorInterceptorMock.mutex.Lock()
	mmUnaryMetadataPropagatorInterceptor.UnaryMetadataPropagatorInterceptorMock.callArgs = append(mmUnaryMetadataPropagatorInterceptor.UnaryMetadataPropagatorInterceptorMock.callArgs, &mm_params)
	mmUnaryMetadataPropagatorInterceptor.UnaryMetadataPropagatorInterceptorMock.mutex.Unlock()

	for _, e := range mmUnaryMetadataPropagatorInterceptor.UnaryMetadataPropagatorInterceptorMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUnaryMetadataPropagatorInterceptor.UnaryMetadataPropagatorInterceptorMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUnaryMetadataPropagatorInterceptor.UnaryMetadataPropagatorInterceptorMock.defaultExpectation.Counter, 1)
		mm_want := mmUnaryMetadataPropagatorInterceptor.UnaryMetadataPropagatorInterceptorMock.defaultExpectation.params
		mm_want_ptrs := mmUnaryMetadataPropagatorInterceptor.UnaryMetadataPropagatorInterceptorMock.defaultExpectation.paramPtrs

		mm_got := MetadataPropagatorMockUnaryMetadataPropagatorInterceptorParams{ctx, method, req, reply, cc, invoker, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUnaryMetadataPropagatorInterceptor.t.Errorf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUnaryMetadataPropagatorInterceptor.UnaryMetadataPropagatorInterceptorMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.method != nil && !minimock.Equal(*mm_want_ptrs.method, mm_got.method) {
				mmUnaryMetadataPropagatorInterceptor.t.Errorf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor got unexpected parameter method, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUnaryMetadataPropagatorInterceptor.UnaryMetadataPropagatorInterceptorMock.defaultExpectation.expectationOrigins.originMethod, *mm_want_ptrs.method, mm_got.method, minimock.Diff(*mm_want_ptrs.method, mm_got.method))
			}

			if mm_want_ptrs.req != nil && !minimock.Equal(*mm_want_ptrs.req, mm_got.req) {
				mmUnaryMetadataPropagatorInterceptor.t.Errorf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor got unexpected parameter req, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUnaryMetadataPropagatorInterceptor.UnaryMetadataPropagatorInterceptorMock.defaultExpectation.expectationOrigins.originReq, *mm_want_ptrs.req, mm_got.req, minimock.Diff(*mm_want_ptrs.req, mm_got.req))
			}

			if mm_want_ptrs.reply != nil && !minimock.Equal(*mm_want_ptrs.reply, mm_got.reply) {
				mmUnaryMetadataPropagatorInterceptor.t.Errorf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor got unexpected parameter reply, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUnaryMetadataPropagatorInterceptor.UnaryMetadataPropagatorInterceptorMock.defaultExpectation.expectationOrigins.originReply, *mm_want_ptrs.reply, mm_got.reply, minimock.Diff(*mm_want_ptrs.reply, mm_got.reply))
			}

			if mm_want_ptrs.cc != nil && !minimock.Equal(*mm_want_ptrs.cc, mm_got.cc) {
				mmUnaryMetadataPropagatorInterceptor.t.Errorf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor got unexpected parameter cc, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUnaryMetadataPropagatorInterceptor.UnaryMetadataPropagatorInterceptorMock.defaultExpectation.expectationOrigins.originCc, *mm_want_ptrs.cc, mm_got.cc, minimock.Diff(*mm_want_ptrs.cc, mm_got.cc))
			}

			if mm_want_ptrs.invoker != nil && !minimock.Equal(*mm_want_ptrs.invoker, mm_got.invoker) {
				mmUnaryMetadataPropagatorInterceptor.t.Errorf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor got unexpected parameter invoker, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUnaryMetadataPropagatorInterceptor.UnaryMetadataPropagatorInterceptorMock.defaultExpectation.expectationOrigins.originInvoker, *mm_want_ptrs.invoker, mm_got.invoker, minimock.Diff(*mm_want_ptrs.invoker, mm_got.invoker))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmUnaryMetadataPropagatorInterceptor.t.Errorf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUnaryMetadataPropagatorInterceptor.UnaryMetadataPropagatorInterceptorMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUnaryMetadataPropagatorInterceptor.t.Errorf("MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUnaryMetadataPropagatorInterceptor.UnaryMetadataPropagatorInterceptorMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUnaryMetadataPropagatorInterceptor.UnaryMetadataPropagatorInterceptorMock.defaultExpectation.results
		if mm_results == nil {
			mmUnaryMetadataPropagatorInterceptor.t.Fatal("No results are set for the MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor")
		}
		return (*mm_results).err
	}
	if mmUnaryMetadataPropagatorInterceptor.funcUnaryMetadataPropagatorInterceptor != nil {
		return mmUnaryMetadataPropagatorInterceptor.funcUnaryMetadataPropagatorInterceptor(ctx, method, req, reply, cc, invoker, opts...)
	}
	mmUnaryMetadataPropagatorInterceptor.t.Fatalf("Unexpected call to MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor. %v %v %v %v %v %v %v", ctx, method, req, reply, cc, invoker, opts)
	return
}

// UnaryMetadataPropagatorInterceptorAfterCounter returns a count of finished MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor invocations
func (mmUnaryMetadataPropagatorInterceptor *MetadataPropagatorMock) UnaryMetadataPropagatorInterceptorAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUnaryMetadataPropagatorInterceptor.afterUnaryMetadataPropagatorInterceptorCounter)
}

// UnaryMetadataPropagatorInterceptorBeforeCounter returns a count of MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor invocations
func (mmUnaryMetadataPropagatorInterceptor *MetadataPropagatorMock) UnaryMetadataPropagatorInterceptorBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUnaryMetadataPropagatorInterceptor.beforeUnaryMetadataPropagatorInterceptorCounter)
}

// Calls returns a list of arguments used in each call to MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUnaryMetadataPropagatorInterceptor *mMetadataPropagatorMockUnaryMetadataPropagatorInterceptor) Calls() []*MetadataPropagatorMockUnaryMetadataPropagatorInterceptorParams {
	mmUnaryMetadataPropagatorInterceptor.mutex.RLock()

	argCopy := make([]*MetadataPropagatorMockUnaryMetadataPropagatorInterceptorParams, len(mmUnaryMetadataPropagatorInterceptor.callArgs))
	copy(argCopy, mmUnaryMetadataPropagatorInterceptor.callArgs)

	mmUnaryMetadataPropagatorInterceptor.mutex.RUnlock()

	return argCopy
}

// MinimockUnaryMetadataPropagatorInterceptorDone returns true if the count of the UnaryMetadataPropagatorInterceptor invocations corresponds
// the number of defined expectations
func (m *MetadataPropagatorMock) MinimockUnaryMetadataPropagatorInterceptorDone() bool {
	if m.UnaryMetadataPropagatorInterceptorMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UnaryMetadataPropagatorInterceptorMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UnaryMetadataPropagatorInterceptorMock.invocationsDone()
}

// MinimockUnaryMetadataPropagatorInterceptorInspect logs each unmet expectation
func (m *MetadataPropagatorMock) MinimockUnaryMetadataPropagatorInterceptorInspect() {
	for _, e := range m.UnaryMetadataPropagatorInterceptorMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUnaryMetadataPropagatorInterceptorCounter := mm_atomic.LoadUint64(&m.afterUnaryMetadataPropagatorInterceptorCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UnaryMetadataPropagatorInterceptorMock.defaultExpectation != nil && afterUnaryMetadataPropagatorInterceptorCounter < 1 {
		if m.UnaryMetadataPropagatorInterceptorMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor at\n%s", m.UnaryMetadataPropagatorInterceptorMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor at\n%s with params: %#v", m.UnaryMetadataPropagatorInterceptorMock.defaultExpectation.expectationOrigins.origin, *m.UnaryMetadataPropagatorInterceptorMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUnaryMetadataPropagatorInterceptor != nil && afterUnaryMetadataPropagatorInterceptorCounter < 1 {
		m.t.Errorf("Expected call to MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor at\n%s", m.funcUnaryMetadataPropagatorInterceptorOrigin)
	}

	if !m.UnaryMetadataPropagatorInterceptorMock.invocationsDone() && afterUnaryMetadataPropagatorInterceptorCounter > 0 {
		m.t.Errorf("Expected %d calls to MetadataPropagatorMock.UnaryMetadataPropagatorInterceptor at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UnaryMetadataPropagatorInterceptorMock.expectedInvocations), m.UnaryMetadataPropagatorInterceptorMock.expectedInvocationsOrigin, afterUnaryMetadataPropagatorInterceptorCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MetadataPropagatorMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockStreamMetadataPropagatorInterceptorInspect()

			m.MinimockUnaryMetadataPropagatorInterceptorInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MetadataPropagatorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MetadataPropagatorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockStreamMetadataPropagatorInterceptorDone() &&
		m.MinimockUnaryMetadataPropagatorInterceptorDone()
}
