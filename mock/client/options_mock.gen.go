// Code generated by http://github.com/gojuno/minimock (v3.4.3). DO NOT EDIT.

package client

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/instill-ai/x/client"
)

// OptionsMock implements Options
type OptionsMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetServiceConfig          func() (s1 client.ServiceConfig)
	funcGetServiceConfigOrigin    string
	inspectFuncGetServiceConfig   func()
	afterGetServiceConfigCounter  uint64
	beforeGetServiceConfigCounter uint64
	GetServiceConfigMock          mOptionsMockGetServiceConfig

	funcGetSetOTELClientHandler          func() (b1 bool)
	funcGetSetOTELClientHandlerOrigin    string
	inspectFuncGetSetOTELClientHandler   func()
	afterGetSetOTELClientHandlerCounter  uint64
	beforeGetSetOTELClientHandlerCounter uint64
	GetSetOTELClientHandlerMock          mOptionsMockGetSetOTELClientHandler
}

// NewOptionsMock returns a mock for Options
func NewOptionsMock(t minimock.Tester) *OptionsMock {
	m := &OptionsMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetServiceConfigMock = mOptionsMockGetServiceConfig{mock: m}

	m.GetSetOTELClientHandlerMock = mOptionsMockGetSetOTELClientHandler{mock: m}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mOptionsMockGetServiceConfig struct {
	optional           bool
	mock               *OptionsMock
	defaultExpectation *OptionsMockGetServiceConfigExpectation
	expectations       []*OptionsMockGetServiceConfigExpectation

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OptionsMockGetServiceConfigExpectation specifies expectation struct of the Options.GetServiceConfig
type OptionsMockGetServiceConfigExpectation struct {
	mock *OptionsMock

	results      *OptionsMockGetServiceConfigResults
	returnOrigin string
	Counter      uint64
}

// OptionsMockGetServiceConfigResults contains results of the Options.GetServiceConfig
type OptionsMockGetServiceConfigResults struct {
	s1 client.ServiceConfig
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetServiceConfig *mOptionsMockGetServiceConfig) Optional() *mOptionsMockGetServiceConfig {
	mmGetServiceConfig.optional = true
	return mmGetServiceConfig
}

// Expect sets up expected params for Options.GetServiceConfig
func (mmGetServiceConfig *mOptionsMockGetServiceConfig) Expect() *mOptionsMockGetServiceConfig {
	if mmGetServiceConfig.mock.funcGetServiceConfig != nil {
		mmGetServiceConfig.mock.t.Fatalf("OptionsMock.GetServiceConfig mock is already set by Set")
	}

	if mmGetServiceConfig.defaultExpectation == nil {
		mmGetServiceConfig.defaultExpectation = &OptionsMockGetServiceConfigExpectation{}
	}

	return mmGetServiceConfig
}

// Inspect accepts an inspector function that has same arguments as the Options.GetServiceConfig
func (mmGetServiceConfig *mOptionsMockGetServiceConfig) Inspect(f func()) *mOptionsMockGetServiceConfig {
	if mmGetServiceConfig.mock.inspectFuncGetServiceConfig != nil {
		mmGetServiceConfig.mock.t.Fatalf("Inspect function is already set for OptionsMock.GetServiceConfig")
	}

	mmGetServiceConfig.mock.inspectFuncGetServiceConfig = f

	return mmGetServiceConfig
}

// Return sets up results that will be returned by Options.GetServiceConfig
func (mmGetServiceConfig *mOptionsMockGetServiceConfig) Return(s1 client.ServiceConfig) *OptionsMock {
	if mmGetServiceConfig.mock.funcGetServiceConfig != nil {
		mmGetServiceConfig.mock.t.Fatalf("OptionsMock.GetServiceConfig mock is already set by Set")
	}

	if mmGetServiceConfig.defaultExpectation == nil {
		mmGetServiceConfig.defaultExpectation = &OptionsMockGetServiceConfigExpectation{mock: mmGetServiceConfig.mock}
	}
	mmGetServiceConfig.defaultExpectation.results = &OptionsMockGetServiceConfigResults{s1}
	mmGetServiceConfig.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetServiceConfig.mock
}

// Set uses given function f to mock the Options.GetServiceConfig method
func (mmGetServiceConfig *mOptionsMockGetServiceConfig) Set(f func() (s1 client.ServiceConfig)) *OptionsMock {
	if mmGetServiceConfig.defaultExpectation != nil {
		mmGetServiceConfig.mock.t.Fatalf("Default expectation is already set for the Options.GetServiceConfig method")
	}

	if len(mmGetServiceConfig.expectations) > 0 {
		mmGetServiceConfig.mock.t.Fatalf("Some expectations are already set for the Options.GetServiceConfig method")
	}

	mmGetServiceConfig.mock.funcGetServiceConfig = f
	mmGetServiceConfig.mock.funcGetServiceConfigOrigin = minimock.CallerInfo(1)
	return mmGetServiceConfig.mock
}

// Times sets number of times Options.GetServiceConfig should be invoked
func (mmGetServiceConfig *mOptionsMockGetServiceConfig) Times(n uint64) *mOptionsMockGetServiceConfig {
	if n == 0 {
		mmGetServiceConfig.mock.t.Fatalf("Times of OptionsMock.GetServiceConfig mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetServiceConfig.expectedInvocations, n)
	mmGetServiceConfig.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetServiceConfig
}

func (mmGetServiceConfig *mOptionsMockGetServiceConfig) invocationsDone() bool {
	if len(mmGetServiceConfig.expectations) == 0 && mmGetServiceConfig.defaultExpectation == nil && mmGetServiceConfig.mock.funcGetServiceConfig == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetServiceConfig.mock.afterGetServiceConfigCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetServiceConfig.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetServiceConfig implements Options
func (mmGetServiceConfig *OptionsMock) GetServiceConfig() (s1 client.ServiceConfig) {
	mm_atomic.AddUint64(&mmGetServiceConfig.beforeGetServiceConfigCounter, 1)
	defer mm_atomic.AddUint64(&mmGetServiceConfig.afterGetServiceConfigCounter, 1)

	mmGetServiceConfig.t.Helper()

	if mmGetServiceConfig.inspectFuncGetServiceConfig != nil {
		mmGetServiceConfig.inspectFuncGetServiceConfig()
	}

	if mmGetServiceConfig.GetServiceConfigMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetServiceConfig.GetServiceConfigMock.defaultExpectation.Counter, 1)

		mm_results := mmGetServiceConfig.GetServiceConfigMock.defaultExpectation.results
		if mm_results == nil {
			mmGetServiceConfig.t.Fatal("No results are set for the OptionsMock.GetServiceConfig")
		}
		return (*mm_results).s1
	}
	if mmGetServiceConfig.funcGetServiceConfig != nil {
		return mmGetServiceConfig.funcGetServiceConfig()
	}
	mmGetServiceConfig.t.Fatalf("Unexpected call to OptionsMock.GetServiceConfig.")
	return
}

// GetServiceConfigAfterCounter returns a count of finished OptionsMock.GetServiceConfig invocations
func (mmGetServiceConfig *OptionsMock) GetServiceConfigAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetServiceConfig.afterGetServiceConfigCounter)
}

// GetServiceConfigBeforeCounter returns a count of OptionsMock.GetServiceConfig invocations
func (mmGetServiceConfig *OptionsMock) GetServiceConfigBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetServiceConfig.beforeGetServiceConfigCounter)
}

// MinimockGetServiceConfigDone returns true if the count of the GetServiceConfig invocations corresponds
// the number of defined expectations
func (m *OptionsMock) MinimockGetServiceConfigDone() bool {
	if m.GetServiceConfigMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetServiceConfigMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetServiceConfigMock.invocationsDone()
}

// MinimockGetServiceConfigInspect logs each unmet expectation
func (m *OptionsMock) MinimockGetServiceConfigInspect() {
	for _, e := range m.GetServiceConfigMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to OptionsMock.GetServiceConfig")
		}
	}

	afterGetServiceConfigCounter := mm_atomic.LoadUint64(&m.afterGetServiceConfigCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetServiceConfigMock.defaultExpectation != nil && afterGetServiceConfigCounter < 1 {
		m.t.Errorf("Expected call to OptionsMock.GetServiceConfig at\n%s", m.GetServiceConfigMock.defaultExpectation.returnOrigin)
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetServiceConfig != nil && afterGetServiceConfigCounter < 1 {
		m.t.Errorf("Expected call to OptionsMock.GetServiceConfig at\n%s", m.funcGetServiceConfigOrigin)
	}

	if !m.GetServiceConfigMock.invocationsDone() && afterGetServiceConfigCounter > 0 {
		m.t.Errorf("Expected %d calls to OptionsMock.GetServiceConfig at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetServiceConfigMock.expectedInvocations), m.GetServiceConfigMock.expectedInvocationsOrigin, afterGetServiceConfigCounter)
	}
}

type mOptionsMockGetSetOTELClientHandler struct {
	optional           bool
	mock               *OptionsMock
	defaultExpectation *OptionsMockGetSetOTELClientHandlerExpectation
	expectations       []*OptionsMockGetSetOTELClientHandlerExpectation

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OptionsMockGetSetOTELClientHandlerExpectation specifies expectation struct of the Options.GetSetOTELClientHandler
type OptionsMockGetSetOTELClientHandlerExpectation struct {
	mock *OptionsMock

	results      *OptionsMockGetSetOTELClientHandlerResults
	returnOrigin string
	Counter      uint64
}

// OptionsMockGetSetOTELClientHandlerResults contains results of the Options.GetSetOTELClientHandler
type OptionsMockGetSetOTELClientHandlerResults struct {
	b1 bool
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetSetOTELClientHandler *mOptionsMockGetSetOTELClientHandler) Optional() *mOptionsMockGetSetOTELClientHandler {
	mmGetSetOTELClientHandler.optional = true
	return mmGetSetOTELClientHandler
}

// Expect sets up expected params for Options.GetSetOTELClientHandler
func (mmGetSetOTELClientHandler *mOptionsMockGetSetOTELClientHandler) Expect() *mOptionsMockGetSetOTELClientHandler {
	if mmGetSetOTELClientHandler.mock.funcGetSetOTELClientHandler != nil {
		mmGetSetOTELClientHandler.mock.t.Fatalf("OptionsMock.GetSetOTELClientHandler mock is already set by Set")
	}

	if mmGetSetOTELClientHandler.defaultExpectation == nil {
		mmGetSetOTELClientHandler.defaultExpectation = &OptionsMockGetSetOTELClientHandlerExpectation{}
	}

	return mmGetSetOTELClientHandler
}

// Inspect accepts an inspector function that has same arguments as the Options.GetSetOTELClientHandler
func (mmGetSetOTELClientHandler *mOptionsMockGetSetOTELClientHandler) Inspect(f func()) *mOptionsMockGetSetOTELClientHandler {
	if mmGetSetOTELClientHandler.mock.inspectFuncGetSetOTELClientHandler != nil {
		mmGetSetOTELClientHandler.mock.t.Fatalf("Inspect function is already set for OptionsMock.GetSetOTELClientHandler")
	}

	mmGetSetOTELClientHandler.mock.inspectFuncGetSetOTELClientHandler = f

	return mmGetSetOTELClientHandler
}

// Return sets up results that will be returned by Options.GetSetOTELClientHandler
func (mmGetSetOTELClientHandler *mOptionsMockGetSetOTELClientHandler) Return(b1 bool) *OptionsMock {
	if mmGetSetOTELClientHandler.mock.funcGetSetOTELClientHandler != nil {
		mmGetSetOTELClientHandler.mock.t.Fatalf("OptionsMock.GetSetOTELClientHandler mock is already set by Set")
	}

	if mmGetSetOTELClientHandler.defaultExpectation == nil {
		mmGetSetOTELClientHandler.defaultExpectation = &OptionsMockGetSetOTELClientHandlerExpectation{mock: mmGetSetOTELClientHandler.mock}
	}
	mmGetSetOTELClientHandler.defaultExpectation.results = &OptionsMockGetSetOTELClientHandlerResults{b1}
	mmGetSetOTELClientHandler.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetSetOTELClientHandler.mock
}

// Set uses given function f to mock the Options.GetSetOTELClientHandler method
func (mmGetSetOTELClientHandler *mOptionsMockGetSetOTELClientHandler) Set(f func() (b1 bool)) *OptionsMock {
	if mmGetSetOTELClientHandler.defaultExpectation != nil {
		mmGetSetOTELClientHandler.mock.t.Fatalf("Default expectation is already set for the Options.GetSetOTELClientHandler method")
	}

	if len(mmGetSetOTELClientHandler.expectations) > 0 {
		mmGetSetOTELClientHandler.mock.t.Fatalf("Some expectations are already set for the Options.GetSetOTELClientHandler method")
	}

	mmGetSetOTELClientHandler.mock.funcGetSetOTELClientHandler = f
	mmGetSetOTELClientHandler.mock.funcGetSetOTELClientHandlerOrigin = minimock.CallerInfo(1)
	return mmGetSetOTELClientHandler.mock
}

// Times sets number of times Options.GetSetOTELClientHandler should be invoked
func (mmGetSetOTELClientHandler *mOptionsMockGetSetOTELClientHandler) Times(n uint64) *mOptionsMockGetSetOTELClientHandler {
	if n == 0 {
		mmGetSetOTELClientHandler.mock.t.Fatalf("Times of OptionsMock.GetSetOTELClientHandler mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetSetOTELClientHandler.expectedInvocations, n)
	mmGetSetOTELClientHandler.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetSetOTELClientHandler
}

func (mmGetSetOTELClientHandler *mOptionsMockGetSetOTELClientHandler) invocationsDone() bool {
	if len(mmGetSetOTELClientHandler.expectations) == 0 && mmGetSetOTELClientHandler.defaultExpectation == nil && mmGetSetOTELClientHandler.mock.funcGetSetOTELClientHandler == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetSetOTELClientHandler.mock.afterGetSetOTELClientHandlerCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetSetOTELClientHandler.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetSetOTELClientHandler implements Options
func (mmGetSetOTELClientHandler *OptionsMock) GetSetOTELClientHandler() (b1 bool) {
	mm_atomic.AddUint64(&mmGetSetOTELClientHandler.beforeGetSetOTELClientHandlerCounter, 1)
	defer mm_atomic.AddUint64(&mmGetSetOTELClientHandler.afterGetSetOTELClientHandlerCounter, 1)

	mmGetSetOTELClientHandler.t.Helper()

	if mmGetSetOTELClientHandler.inspectFuncGetSetOTELClientHandler != nil {
		mmGetSetOTELClientHandler.inspectFuncGetSetOTELClientHandler()
	}

	if mmGetSetOTELClientHandler.GetSetOTELClientHandlerMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetSetOTELClientHandler.GetSetOTELClientHandlerMock.defaultExpectation.Counter, 1)

		mm_results := mmGetSetOTELClientHandler.GetSetOTELClientHandlerMock.defaultExpectation.results
		if mm_results == nil {
			mmGetSetOTELClientHandler.t.Fatal("No results are set for the OptionsMock.GetSetOTELClientHandler")
		}
		return (*mm_results).b1
	}
	if mmGetSetOTELClientHandler.funcGetSetOTELClientHandler != nil {
		return mmGetSetOTELClientHandler.funcGetSetOTELClientHandler()
	}
	mmGetSetOTELClientHandler.t.Fatalf("Unexpected call to OptionsMock.GetSetOTELClientHandler.")
	return
}

// GetSetOTELClientHandlerAfterCounter returns a count of finished OptionsMock.GetSetOTELClientHandler invocations
func (mmGetSetOTELClientHandler *OptionsMock) GetSetOTELClientHandlerAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSetOTELClientHandler.afterGetSetOTELClientHandlerCounter)
}

// GetSetOTELClientHandlerBeforeCounter returns a count of OptionsMock.GetSetOTELClientHandler invocations
func (mmGetSetOTELClientHandler *OptionsMock) GetSetOTELClientHandlerBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSetOTELClientHandler.beforeGetSetOTELClientHandlerCounter)
}

// MinimockGetSetOTELClientHandlerDone returns true if the count of the GetSetOTELClientHandler invocations corresponds
// the number of defined expectations
func (m *OptionsMock) MinimockGetSetOTELClientHandlerDone() bool {
	if m.GetSetOTELClientHandlerMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetSetOTELClientHandlerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetSetOTELClientHandlerMock.invocationsDone()
}

// MinimockGetSetOTELClientHandlerInspect logs each unmet expectation
func (m *OptionsMock) MinimockGetSetOTELClientHandlerInspect() {
	for _, e := range m.GetSetOTELClientHandlerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to OptionsMock.GetSetOTELClientHandler")
		}
	}

	afterGetSetOTELClientHandlerCounter := mm_atomic.LoadUint64(&m.afterGetSetOTELClientHandlerCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetSetOTELClientHandlerMock.defaultExpectation != nil && afterGetSetOTELClientHandlerCounter < 1 {
		m.t.Errorf("Expected call to OptionsMock.GetSetOTELClientHandler at\n%s", m.GetSetOTELClientHandlerMock.defaultExpectation.returnOrigin)
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSetOTELClientHandler != nil && afterGetSetOTELClientHandlerCounter < 1 {
		m.t.Errorf("Expected call to OptionsMock.GetSetOTELClientHandler at\n%s", m.funcGetSetOTELClientHandlerOrigin)
	}

	if !m.GetSetOTELClientHandlerMock.invocationsDone() && afterGetSetOTELClientHandlerCounter > 0 {
		m.t.Errorf("Expected %d calls to OptionsMock.GetSetOTELClientHandler at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetSetOTELClientHandlerMock.expectedInvocations), m.GetSetOTELClientHandlerMock.expectedInvocationsOrigin, afterGetSetOTELClientHandlerCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OptionsMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetServiceConfigInspect()

			m.MinimockGetSetOTELClientHandlerInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OptionsMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OptionsMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetServiceConfigDone() &&
		m.MinimockGetSetOTELClientHandlerDone()
}
