// Code generated by http://github.com/gojuno/minimock (v3.4.3). DO NOT EDIT.

package client

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// OptionMock implements Option
type OptionMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcApply          func(op1 *Options)
	funcApplyOrigin    string
	inspectFuncApply   func(op1 *Options)
	afterApplyCounter  uint64
	beforeApplyCounter uint64
	ApplyMock          mOptionMockApply
}

// NewOptionMock returns a mock for Option
func NewOptionMock(t minimock.Tester) *OptionMock {
	m := &OptionMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ApplyMock = mOptionMockApply{mock: m}
	m.ApplyMock.callArgs = []*OptionMockApplyParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mOptionMockApply struct {
	optional           bool
	mock               *OptionMock
	defaultExpectation *OptionMockApplyExpectation
	expectations       []*OptionMockApplyExpectation

	callArgs []*OptionMockApplyParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OptionMockApplyExpectation specifies expectation struct of the Option.Apply
type OptionMockApplyExpectation struct {
	mock               *OptionMock
	params             *OptionMockApplyParams
	paramPtrs          *OptionMockApplyParamPtrs
	expectationOrigins OptionMockApplyExpectationOrigins

	returnOrigin string
	Counter      uint64
}

// OptionMockApplyParams contains parameters of the Option.Apply
type OptionMockApplyParams struct {
	op1 *Options
}

// OptionMockApplyParamPtrs contains pointers to parameters of the Option.Apply
type OptionMockApplyParamPtrs struct {
	op1 **Options
}

// OptionMockApplyOrigins contains origins of expectations of the Option.Apply
type OptionMockApplyExpectationOrigins struct {
	origin    string
	originOp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmApply *mOptionMockApply) Optional() *mOptionMockApply {
	mmApply.optional = true
	return mmApply
}

// Expect sets up expected params for Option.Apply
func (mmApply *mOptionMockApply) Expect(op1 *Options) *mOptionMockApply {
	if mmApply.mock.funcApply != nil {
		mmApply.mock.t.Fatalf("OptionMock.Apply mock is already set by Set")
	}

	if mmApply.defaultExpectation == nil {
		mmApply.defaultExpectation = &OptionMockApplyExpectation{}
	}

	if mmApply.defaultExpectation.paramPtrs != nil {
		mmApply.mock.t.Fatalf("OptionMock.Apply mock is already set by ExpectParams functions")
	}

	mmApply.defaultExpectation.params = &OptionMockApplyParams{op1}
	mmApply.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmApply.expectations {
		if minimock.Equal(e.params, mmApply.defaultExpectation.params) {
			mmApply.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmApply.defaultExpectation.params)
		}
	}

	return mmApply
}

// ExpectOp1Param1 sets up expected param op1 for Option.Apply
func (mmApply *mOptionMockApply) ExpectOp1Param1(op1 *Options) *mOptionMockApply {
	if mmApply.mock.funcApply != nil {
		mmApply.mock.t.Fatalf("OptionMock.Apply mock is already set by Set")
	}

	if mmApply.defaultExpectation == nil {
		mmApply.defaultExpectation = &OptionMockApplyExpectation{}
	}

	if mmApply.defaultExpectation.params != nil {
		mmApply.mock.t.Fatalf("OptionMock.Apply mock is already set by Expect")
	}

	if mmApply.defaultExpectation.paramPtrs == nil {
		mmApply.defaultExpectation.paramPtrs = &OptionMockApplyParamPtrs{}
	}
	mmApply.defaultExpectation.paramPtrs.op1 = &op1
	mmApply.defaultExpectation.expectationOrigins.originOp1 = minimock.CallerInfo(1)

	return mmApply
}

// Inspect accepts an inspector function that has same arguments as the Option.Apply
func (mmApply *mOptionMockApply) Inspect(f func(op1 *Options)) *mOptionMockApply {
	if mmApply.mock.inspectFuncApply != nil {
		mmApply.mock.t.Fatalf("Inspect function is already set for OptionMock.Apply")
	}

	mmApply.mock.inspectFuncApply = f

	return mmApply
}

// Return sets up results that will be returned by Option.Apply
func (mmApply *mOptionMockApply) Return() *OptionMock {
	if mmApply.mock.funcApply != nil {
		mmApply.mock.t.Fatalf("OptionMock.Apply mock is already set by Set")
	}

	if mmApply.defaultExpectation == nil {
		mmApply.defaultExpectation = &OptionMockApplyExpectation{mock: mmApply.mock}
	}

	mmApply.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmApply.mock
}

// Set uses given function f to mock the Option.Apply method
func (mmApply *mOptionMockApply) Set(f func(op1 *Options)) *OptionMock {
	if mmApply.defaultExpectation != nil {
		mmApply.mock.t.Fatalf("Default expectation is already set for the Option.Apply method")
	}

	if len(mmApply.expectations) > 0 {
		mmApply.mock.t.Fatalf("Some expectations are already set for the Option.Apply method")
	}

	mmApply.mock.funcApply = f
	mmApply.mock.funcApplyOrigin = minimock.CallerInfo(1)
	return mmApply.mock
}

// Times sets number of times Option.Apply should be invoked
func (mmApply *mOptionMockApply) Times(n uint64) *mOptionMockApply {
	if n == 0 {
		mmApply.mock.t.Fatalf("Times of OptionMock.Apply mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmApply.expectedInvocations, n)
	mmApply.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmApply
}

func (mmApply *mOptionMockApply) invocationsDone() bool {
	if len(mmApply.expectations) == 0 && mmApply.defaultExpectation == nil && mmApply.mock.funcApply == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmApply.mock.afterApplyCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmApply.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Apply implements Option
func (mmApply *OptionMock) Apply(op1 *Options) {
	mm_atomic.AddUint64(&mmApply.beforeApplyCounter, 1)
	defer mm_atomic.AddUint64(&mmApply.afterApplyCounter, 1)

	mmApply.t.Helper()

	if mmApply.inspectFuncApply != nil {
		mmApply.inspectFuncApply(op1)
	}

	mm_params := OptionMockApplyParams{op1}

	// Record call args
	mmApply.ApplyMock.mutex.Lock()
	mmApply.ApplyMock.callArgs = append(mmApply.ApplyMock.callArgs, &mm_params)
	mmApply.ApplyMock.mutex.Unlock()

	for _, e := range mmApply.ApplyMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmApply.ApplyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmApply.ApplyMock.defaultExpectation.Counter, 1)
		mm_want := mmApply.ApplyMock.defaultExpectation.params
		mm_want_ptrs := mmApply.ApplyMock.defaultExpectation.paramPtrs

		mm_got := OptionMockApplyParams{op1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.op1 != nil && !minimock.Equal(*mm_want_ptrs.op1, mm_got.op1) {
				mmApply.t.Errorf("OptionMock.Apply got unexpected parameter op1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmApply.ApplyMock.defaultExpectation.expectationOrigins.originOp1, *mm_want_ptrs.op1, mm_got.op1, minimock.Diff(*mm_want_ptrs.op1, mm_got.op1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmApply.t.Errorf("OptionMock.Apply got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmApply.ApplyMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmApply.funcApply != nil {
		mmApply.funcApply(op1)
		return
	}
	mmApply.t.Fatalf("Unexpected call to OptionMock.Apply. %v", op1)

}

// ApplyAfterCounter returns a count of finished OptionMock.Apply invocations
func (mmApply *OptionMock) ApplyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmApply.afterApplyCounter)
}

// ApplyBeforeCounter returns a count of OptionMock.Apply invocations
func (mmApply *OptionMock) ApplyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmApply.beforeApplyCounter)
}

// Calls returns a list of arguments used in each call to OptionMock.Apply.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmApply *mOptionMockApply) Calls() []*OptionMockApplyParams {
	mmApply.mutex.RLock()

	argCopy := make([]*OptionMockApplyParams, len(mmApply.callArgs))
	copy(argCopy, mmApply.callArgs)

	mmApply.mutex.RUnlock()

	return argCopy
}

// MinimockApplyDone returns true if the count of the Apply invocations corresponds
// the number of defined expectations
func (m *OptionMock) MinimockApplyDone() bool {
	if m.ApplyMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ApplyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ApplyMock.invocationsDone()
}

// MinimockApplyInspect logs each unmet expectation
func (m *OptionMock) MinimockApplyInspect() {
	for _, e := range m.ApplyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OptionMock.Apply at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterApplyCounter := mm_atomic.LoadUint64(&m.afterApplyCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ApplyMock.defaultExpectation != nil && afterApplyCounter < 1 {
		if m.ApplyMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to OptionMock.Apply at\n%s", m.ApplyMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to OptionMock.Apply at\n%s with params: %#v", m.ApplyMock.defaultExpectation.expectationOrigins.origin, *m.ApplyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcApply != nil && afterApplyCounter < 1 {
		m.t.Errorf("Expected call to OptionMock.Apply at\n%s", m.funcApplyOrigin)
	}

	if !m.ApplyMock.invocationsDone() && afterApplyCounter > 0 {
		m.t.Errorf("Expected %d calls to OptionMock.Apply at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ApplyMock.expectedInvocations), m.ApplyMock.expectedInvocationsOrigin, afterApplyCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OptionMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockApplyInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OptionMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OptionMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockApplyDone()
}
