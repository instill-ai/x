// Code generated by http://github.com/gojuno/minimock (v3.4.3). DO NOT EDIT.

package log

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"go.uber.org/zap/zapcore"
)

// SyncerFactoryMock implements SyncerFactory
type SyncerFactoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcNewStderrSyncer          func() (w1 zapcore.WriteSyncer)
	funcNewStderrSyncerOrigin    string
	inspectFuncNewStderrSyncer   func()
	afterNewStderrSyncerCounter  uint64
	beforeNewStderrSyncerCounter uint64
	NewStderrSyncerMock          mSyncerFactoryMockNewStderrSyncer

	funcNewStdoutSyncer          func() (w1 zapcore.WriteSyncer)
	funcNewStdoutSyncerOrigin    string
	inspectFuncNewStdoutSyncer   func()
	afterNewStdoutSyncerCounter  uint64
	beforeNewStdoutSyncerCounter uint64
	NewStdoutSyncerMock          mSyncerFactoryMockNewStdoutSyncer
}

// NewSyncerFactoryMock returns a mock for SyncerFactory
func NewSyncerFactoryMock(t minimock.Tester) *SyncerFactoryMock {
	m := &SyncerFactoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.NewStderrSyncerMock = mSyncerFactoryMockNewStderrSyncer{mock: m}

	m.NewStdoutSyncerMock = mSyncerFactoryMockNewStdoutSyncer{mock: m}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mSyncerFactoryMockNewStderrSyncer struct {
	optional           bool
	mock               *SyncerFactoryMock
	defaultExpectation *SyncerFactoryMockNewStderrSyncerExpectation
	expectations       []*SyncerFactoryMockNewStderrSyncerExpectation

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// SyncerFactoryMockNewStderrSyncerExpectation specifies expectation struct of the SyncerFactory.NewStderrSyncer
type SyncerFactoryMockNewStderrSyncerExpectation struct {
	mock *SyncerFactoryMock

	results      *SyncerFactoryMockNewStderrSyncerResults
	returnOrigin string
	Counter      uint64
}

// SyncerFactoryMockNewStderrSyncerResults contains results of the SyncerFactory.NewStderrSyncer
type SyncerFactoryMockNewStderrSyncerResults struct {
	w1 zapcore.WriteSyncer
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmNewStderrSyncer *mSyncerFactoryMockNewStderrSyncer) Optional() *mSyncerFactoryMockNewStderrSyncer {
	mmNewStderrSyncer.optional = true
	return mmNewStderrSyncer
}

// Expect sets up expected params for SyncerFactory.NewStderrSyncer
func (mmNewStderrSyncer *mSyncerFactoryMockNewStderrSyncer) Expect() *mSyncerFactoryMockNewStderrSyncer {
	if mmNewStderrSyncer.mock.funcNewStderrSyncer != nil {
		mmNewStderrSyncer.mock.t.Fatalf("SyncerFactoryMock.NewStderrSyncer mock is already set by Set")
	}

	if mmNewStderrSyncer.defaultExpectation == nil {
		mmNewStderrSyncer.defaultExpectation = &SyncerFactoryMockNewStderrSyncerExpectation{}
	}

	return mmNewStderrSyncer
}

// Inspect accepts an inspector function that has same arguments as the SyncerFactory.NewStderrSyncer
func (mmNewStderrSyncer *mSyncerFactoryMockNewStderrSyncer) Inspect(f func()) *mSyncerFactoryMockNewStderrSyncer {
	if mmNewStderrSyncer.mock.inspectFuncNewStderrSyncer != nil {
		mmNewStderrSyncer.mock.t.Fatalf("Inspect function is already set for SyncerFactoryMock.NewStderrSyncer")
	}

	mmNewStderrSyncer.mock.inspectFuncNewStderrSyncer = f

	return mmNewStderrSyncer
}

// Return sets up results that will be returned by SyncerFactory.NewStderrSyncer
func (mmNewStderrSyncer *mSyncerFactoryMockNewStderrSyncer) Return(w1 zapcore.WriteSyncer) *SyncerFactoryMock {
	if mmNewStderrSyncer.mock.funcNewStderrSyncer != nil {
		mmNewStderrSyncer.mock.t.Fatalf("SyncerFactoryMock.NewStderrSyncer mock is already set by Set")
	}

	if mmNewStderrSyncer.defaultExpectation == nil {
		mmNewStderrSyncer.defaultExpectation = &SyncerFactoryMockNewStderrSyncerExpectation{mock: mmNewStderrSyncer.mock}
	}
	mmNewStderrSyncer.defaultExpectation.results = &SyncerFactoryMockNewStderrSyncerResults{w1}
	mmNewStderrSyncer.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmNewStderrSyncer.mock
}

// Set uses given function f to mock the SyncerFactory.NewStderrSyncer method
func (mmNewStderrSyncer *mSyncerFactoryMockNewStderrSyncer) Set(f func() (w1 zapcore.WriteSyncer)) *SyncerFactoryMock {
	if mmNewStderrSyncer.defaultExpectation != nil {
		mmNewStderrSyncer.mock.t.Fatalf("Default expectation is already set for the SyncerFactory.NewStderrSyncer method")
	}

	if len(mmNewStderrSyncer.expectations) > 0 {
		mmNewStderrSyncer.mock.t.Fatalf("Some expectations are already set for the SyncerFactory.NewStderrSyncer method")
	}

	mmNewStderrSyncer.mock.funcNewStderrSyncer = f
	mmNewStderrSyncer.mock.funcNewStderrSyncerOrigin = minimock.CallerInfo(1)
	return mmNewStderrSyncer.mock
}

// Times sets number of times SyncerFactory.NewStderrSyncer should be invoked
func (mmNewStderrSyncer *mSyncerFactoryMockNewStderrSyncer) Times(n uint64) *mSyncerFactoryMockNewStderrSyncer {
	if n == 0 {
		mmNewStderrSyncer.mock.t.Fatalf("Times of SyncerFactoryMock.NewStderrSyncer mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmNewStderrSyncer.expectedInvocations, n)
	mmNewStderrSyncer.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmNewStderrSyncer
}

func (mmNewStderrSyncer *mSyncerFactoryMockNewStderrSyncer) invocationsDone() bool {
	if len(mmNewStderrSyncer.expectations) == 0 && mmNewStderrSyncer.defaultExpectation == nil && mmNewStderrSyncer.mock.funcNewStderrSyncer == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmNewStderrSyncer.mock.afterNewStderrSyncerCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmNewStderrSyncer.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// NewStderrSyncer implements SyncerFactory
func (mmNewStderrSyncer *SyncerFactoryMock) NewStderrSyncer() (w1 zapcore.WriteSyncer) {
	mm_atomic.AddUint64(&mmNewStderrSyncer.beforeNewStderrSyncerCounter, 1)
	defer mm_atomic.AddUint64(&mmNewStderrSyncer.afterNewStderrSyncerCounter, 1)

	mmNewStderrSyncer.t.Helper()

	if mmNewStderrSyncer.inspectFuncNewStderrSyncer != nil {
		mmNewStderrSyncer.inspectFuncNewStderrSyncer()
	}

	if mmNewStderrSyncer.NewStderrSyncerMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNewStderrSyncer.NewStderrSyncerMock.defaultExpectation.Counter, 1)

		mm_results := mmNewStderrSyncer.NewStderrSyncerMock.defaultExpectation.results
		if mm_results == nil {
			mmNewStderrSyncer.t.Fatal("No results are set for the SyncerFactoryMock.NewStderrSyncer")
		}
		return (*mm_results).w1
	}
	if mmNewStderrSyncer.funcNewStderrSyncer != nil {
		return mmNewStderrSyncer.funcNewStderrSyncer()
	}
	mmNewStderrSyncer.t.Fatalf("Unexpected call to SyncerFactoryMock.NewStderrSyncer.")
	return
}

// NewStderrSyncerAfterCounter returns a count of finished SyncerFactoryMock.NewStderrSyncer invocations
func (mmNewStderrSyncer *SyncerFactoryMock) NewStderrSyncerAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNewStderrSyncer.afterNewStderrSyncerCounter)
}

// NewStderrSyncerBeforeCounter returns a count of SyncerFactoryMock.NewStderrSyncer invocations
func (mmNewStderrSyncer *SyncerFactoryMock) NewStderrSyncerBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNewStderrSyncer.beforeNewStderrSyncerCounter)
}

// MinimockNewStderrSyncerDone returns true if the count of the NewStderrSyncer invocations corresponds
// the number of defined expectations
func (m *SyncerFactoryMock) MinimockNewStderrSyncerDone() bool {
	if m.NewStderrSyncerMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.NewStderrSyncerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.NewStderrSyncerMock.invocationsDone()
}

// MinimockNewStderrSyncerInspect logs each unmet expectation
func (m *SyncerFactoryMock) MinimockNewStderrSyncerInspect() {
	for _, e := range m.NewStderrSyncerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to SyncerFactoryMock.NewStderrSyncer")
		}
	}

	afterNewStderrSyncerCounter := mm_atomic.LoadUint64(&m.afterNewStderrSyncerCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.NewStderrSyncerMock.defaultExpectation != nil && afterNewStderrSyncerCounter < 1 {
		m.t.Errorf("Expected call to SyncerFactoryMock.NewStderrSyncer at\n%s", m.NewStderrSyncerMock.defaultExpectation.returnOrigin)
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNewStderrSyncer != nil && afterNewStderrSyncerCounter < 1 {
		m.t.Errorf("Expected call to SyncerFactoryMock.NewStderrSyncer at\n%s", m.funcNewStderrSyncerOrigin)
	}

	if !m.NewStderrSyncerMock.invocationsDone() && afterNewStderrSyncerCounter > 0 {
		m.t.Errorf("Expected %d calls to SyncerFactoryMock.NewStderrSyncer at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.NewStderrSyncerMock.expectedInvocations), m.NewStderrSyncerMock.expectedInvocationsOrigin, afterNewStderrSyncerCounter)
	}
}

type mSyncerFactoryMockNewStdoutSyncer struct {
	optional           bool
	mock               *SyncerFactoryMock
	defaultExpectation *SyncerFactoryMockNewStdoutSyncerExpectation
	expectations       []*SyncerFactoryMockNewStdoutSyncerExpectation

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// SyncerFactoryMockNewStdoutSyncerExpectation specifies expectation struct of the SyncerFactory.NewStdoutSyncer
type SyncerFactoryMockNewStdoutSyncerExpectation struct {
	mock *SyncerFactoryMock

	results      *SyncerFactoryMockNewStdoutSyncerResults
	returnOrigin string
	Counter      uint64
}

// SyncerFactoryMockNewStdoutSyncerResults contains results of the SyncerFactory.NewStdoutSyncer
type SyncerFactoryMockNewStdoutSyncerResults struct {
	w1 zapcore.WriteSyncer
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmNewStdoutSyncer *mSyncerFactoryMockNewStdoutSyncer) Optional() *mSyncerFactoryMockNewStdoutSyncer {
	mmNewStdoutSyncer.optional = true
	return mmNewStdoutSyncer
}

// Expect sets up expected params for SyncerFactory.NewStdoutSyncer
func (mmNewStdoutSyncer *mSyncerFactoryMockNewStdoutSyncer) Expect() *mSyncerFactoryMockNewStdoutSyncer {
	if mmNewStdoutSyncer.mock.funcNewStdoutSyncer != nil {
		mmNewStdoutSyncer.mock.t.Fatalf("SyncerFactoryMock.NewStdoutSyncer mock is already set by Set")
	}

	if mmNewStdoutSyncer.defaultExpectation == nil {
		mmNewStdoutSyncer.defaultExpectation = &SyncerFactoryMockNewStdoutSyncerExpectation{}
	}

	return mmNewStdoutSyncer
}

// Inspect accepts an inspector function that has same arguments as the SyncerFactory.NewStdoutSyncer
func (mmNewStdoutSyncer *mSyncerFactoryMockNewStdoutSyncer) Inspect(f func()) *mSyncerFactoryMockNewStdoutSyncer {
	if mmNewStdoutSyncer.mock.inspectFuncNewStdoutSyncer != nil {
		mmNewStdoutSyncer.mock.t.Fatalf("Inspect function is already set for SyncerFactoryMock.NewStdoutSyncer")
	}

	mmNewStdoutSyncer.mock.inspectFuncNewStdoutSyncer = f

	return mmNewStdoutSyncer
}

// Return sets up results that will be returned by SyncerFactory.NewStdoutSyncer
func (mmNewStdoutSyncer *mSyncerFactoryMockNewStdoutSyncer) Return(w1 zapcore.WriteSyncer) *SyncerFactoryMock {
	if mmNewStdoutSyncer.mock.funcNewStdoutSyncer != nil {
		mmNewStdoutSyncer.mock.t.Fatalf("SyncerFactoryMock.NewStdoutSyncer mock is already set by Set")
	}

	if mmNewStdoutSyncer.defaultExpectation == nil {
		mmNewStdoutSyncer.defaultExpectation = &SyncerFactoryMockNewStdoutSyncerExpectation{mock: mmNewStdoutSyncer.mock}
	}
	mmNewStdoutSyncer.defaultExpectation.results = &SyncerFactoryMockNewStdoutSyncerResults{w1}
	mmNewStdoutSyncer.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmNewStdoutSyncer.mock
}

// Set uses given function f to mock the SyncerFactory.NewStdoutSyncer method
func (mmNewStdoutSyncer *mSyncerFactoryMockNewStdoutSyncer) Set(f func() (w1 zapcore.WriteSyncer)) *SyncerFactoryMock {
	if mmNewStdoutSyncer.defaultExpectation != nil {
		mmNewStdoutSyncer.mock.t.Fatalf("Default expectation is already set for the SyncerFactory.NewStdoutSyncer method")
	}

	if len(mmNewStdoutSyncer.expectations) > 0 {
		mmNewStdoutSyncer.mock.t.Fatalf("Some expectations are already set for the SyncerFactory.NewStdoutSyncer method")
	}

	mmNewStdoutSyncer.mock.funcNewStdoutSyncer = f
	mmNewStdoutSyncer.mock.funcNewStdoutSyncerOrigin = minimock.CallerInfo(1)
	return mmNewStdoutSyncer.mock
}

// Times sets number of times SyncerFactory.NewStdoutSyncer should be invoked
func (mmNewStdoutSyncer *mSyncerFactoryMockNewStdoutSyncer) Times(n uint64) *mSyncerFactoryMockNewStdoutSyncer {
	if n == 0 {
		mmNewStdoutSyncer.mock.t.Fatalf("Times of SyncerFactoryMock.NewStdoutSyncer mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmNewStdoutSyncer.expectedInvocations, n)
	mmNewStdoutSyncer.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmNewStdoutSyncer
}

func (mmNewStdoutSyncer *mSyncerFactoryMockNewStdoutSyncer) invocationsDone() bool {
	if len(mmNewStdoutSyncer.expectations) == 0 && mmNewStdoutSyncer.defaultExpectation == nil && mmNewStdoutSyncer.mock.funcNewStdoutSyncer == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmNewStdoutSyncer.mock.afterNewStdoutSyncerCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmNewStdoutSyncer.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// NewStdoutSyncer implements SyncerFactory
func (mmNewStdoutSyncer *SyncerFactoryMock) NewStdoutSyncer() (w1 zapcore.WriteSyncer) {
	mm_atomic.AddUint64(&mmNewStdoutSyncer.beforeNewStdoutSyncerCounter, 1)
	defer mm_atomic.AddUint64(&mmNewStdoutSyncer.afterNewStdoutSyncerCounter, 1)

	mmNewStdoutSyncer.t.Helper()

	if mmNewStdoutSyncer.inspectFuncNewStdoutSyncer != nil {
		mmNewStdoutSyncer.inspectFuncNewStdoutSyncer()
	}

	if mmNewStdoutSyncer.NewStdoutSyncerMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNewStdoutSyncer.NewStdoutSyncerMock.defaultExpectation.Counter, 1)

		mm_results := mmNewStdoutSyncer.NewStdoutSyncerMock.defaultExpectation.results
		if mm_results == nil {
			mmNewStdoutSyncer.t.Fatal("No results are set for the SyncerFactoryMock.NewStdoutSyncer")
		}
		return (*mm_results).w1
	}
	if mmNewStdoutSyncer.funcNewStdoutSyncer != nil {
		return mmNewStdoutSyncer.funcNewStdoutSyncer()
	}
	mmNewStdoutSyncer.t.Fatalf("Unexpected call to SyncerFactoryMock.NewStdoutSyncer.")
	return
}

// NewStdoutSyncerAfterCounter returns a count of finished SyncerFactoryMock.NewStdoutSyncer invocations
func (mmNewStdoutSyncer *SyncerFactoryMock) NewStdoutSyncerAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNewStdoutSyncer.afterNewStdoutSyncerCounter)
}

// NewStdoutSyncerBeforeCounter returns a count of SyncerFactoryMock.NewStdoutSyncer invocations
func (mmNewStdoutSyncer *SyncerFactoryMock) NewStdoutSyncerBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNewStdoutSyncer.beforeNewStdoutSyncerCounter)
}

// MinimockNewStdoutSyncerDone returns true if the count of the NewStdoutSyncer invocations corresponds
// the number of defined expectations
func (m *SyncerFactoryMock) MinimockNewStdoutSyncerDone() bool {
	if m.NewStdoutSyncerMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.NewStdoutSyncerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.NewStdoutSyncerMock.invocationsDone()
}

// MinimockNewStdoutSyncerInspect logs each unmet expectation
func (m *SyncerFactoryMock) MinimockNewStdoutSyncerInspect() {
	for _, e := range m.NewStdoutSyncerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to SyncerFactoryMock.NewStdoutSyncer")
		}
	}

	afterNewStdoutSyncerCounter := mm_atomic.LoadUint64(&m.afterNewStdoutSyncerCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.NewStdoutSyncerMock.defaultExpectation != nil && afterNewStdoutSyncerCounter < 1 {
		m.t.Errorf("Expected call to SyncerFactoryMock.NewStdoutSyncer at\n%s", m.NewStdoutSyncerMock.defaultExpectation.returnOrigin)
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNewStdoutSyncer != nil && afterNewStdoutSyncerCounter < 1 {
		m.t.Errorf("Expected call to SyncerFactoryMock.NewStdoutSyncer at\n%s", m.funcNewStdoutSyncerOrigin)
	}

	if !m.NewStdoutSyncerMock.invocationsDone() && afterNewStdoutSyncerCounter > 0 {
		m.t.Errorf("Expected %d calls to SyncerFactoryMock.NewStdoutSyncer at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.NewStdoutSyncerMock.expectedInvocations), m.NewStdoutSyncerMock.expectedInvocationsOrigin, afterNewStdoutSyncerCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *SyncerFactoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockNewStderrSyncerInspect()

			m.MinimockNewStdoutSyncerInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *SyncerFactoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *SyncerFactoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockNewStderrSyncerDone() &&
		m.MinimockNewStdoutSyncerDone()
}
