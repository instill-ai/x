// Code generated by http://github.com/gojuno/minimock (v3.4.3). DO NOT EDIT.

package server

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"go.opentelemetry.io/otel/log"
)

// OTELLoggerMock implements OTELLogger
type OTELLoggerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcEmit          func(ctx context.Context, record log.Record)
	funcEmitOrigin    string
	inspectFuncEmit   func(ctx context.Context, record log.Record)
	afterEmitCounter  uint64
	beforeEmitCounter uint64
	EmitMock          mOTELLoggerMockEmit
}

// NewOTELLoggerMock returns a mock for OTELLogger
func NewOTELLoggerMock(t minimock.Tester) *OTELLoggerMock {
	m := &OTELLoggerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.EmitMock = mOTELLoggerMockEmit{mock: m}
	m.EmitMock.callArgs = []*OTELLoggerMockEmitParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mOTELLoggerMockEmit struct {
	optional           bool
	mock               *OTELLoggerMock
	defaultExpectation *OTELLoggerMockEmitExpectation
	expectations       []*OTELLoggerMockEmitExpectation

	callArgs []*OTELLoggerMockEmitParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OTELLoggerMockEmitExpectation specifies expectation struct of the OTELLogger.Emit
type OTELLoggerMockEmitExpectation struct {
	mock               *OTELLoggerMock
	params             *OTELLoggerMockEmitParams
	paramPtrs          *OTELLoggerMockEmitParamPtrs
	expectationOrigins OTELLoggerMockEmitExpectationOrigins

	returnOrigin string
	Counter      uint64
}

// OTELLoggerMockEmitParams contains parameters of the OTELLogger.Emit
type OTELLoggerMockEmitParams struct {
	ctx    context.Context
	record log.Record
}

// OTELLoggerMockEmitParamPtrs contains pointers to parameters of the OTELLogger.Emit
type OTELLoggerMockEmitParamPtrs struct {
	ctx    *context.Context
	record *log.Record
}

// OTELLoggerMockEmitOrigins contains origins of expectations of the OTELLogger.Emit
type OTELLoggerMockEmitExpectationOrigins struct {
	origin       string
	originCtx    string
	originRecord string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmEmit *mOTELLoggerMockEmit) Optional() *mOTELLoggerMockEmit {
	mmEmit.optional = true
	return mmEmit
}

// Expect sets up expected params for OTELLogger.Emit
func (mmEmit *mOTELLoggerMockEmit) Expect(ctx context.Context, record log.Record) *mOTELLoggerMockEmit {
	if mmEmit.mock.funcEmit != nil {
		mmEmit.mock.t.Fatalf("OTELLoggerMock.Emit mock is already set by Set")
	}

	if mmEmit.defaultExpectation == nil {
		mmEmit.defaultExpectation = &OTELLoggerMockEmitExpectation{}
	}

	if mmEmit.defaultExpectation.paramPtrs != nil {
		mmEmit.mock.t.Fatalf("OTELLoggerMock.Emit mock is already set by ExpectParams functions")
	}

	mmEmit.defaultExpectation.params = &OTELLoggerMockEmitParams{ctx, record}
	mmEmit.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmEmit.expectations {
		if minimock.Equal(e.params, mmEmit.defaultExpectation.params) {
			mmEmit.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmEmit.defaultExpectation.params)
		}
	}

	return mmEmit
}

// ExpectCtxParam1 sets up expected param ctx for OTELLogger.Emit
func (mmEmit *mOTELLoggerMockEmit) ExpectCtxParam1(ctx context.Context) *mOTELLoggerMockEmit {
	if mmEmit.mock.funcEmit != nil {
		mmEmit.mock.t.Fatalf("OTELLoggerMock.Emit mock is already set by Set")
	}

	if mmEmit.defaultExpectation == nil {
		mmEmit.defaultExpectation = &OTELLoggerMockEmitExpectation{}
	}

	if mmEmit.defaultExpectation.params != nil {
		mmEmit.mock.t.Fatalf("OTELLoggerMock.Emit mock is already set by Expect")
	}

	if mmEmit.defaultExpectation.paramPtrs == nil {
		mmEmit.defaultExpectation.paramPtrs = &OTELLoggerMockEmitParamPtrs{}
	}
	mmEmit.defaultExpectation.paramPtrs.ctx = &ctx
	mmEmit.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmEmit
}

// ExpectRecordParam2 sets up expected param record for OTELLogger.Emit
func (mmEmit *mOTELLoggerMockEmit) ExpectRecordParam2(record log.Record) *mOTELLoggerMockEmit {
	if mmEmit.mock.funcEmit != nil {
		mmEmit.mock.t.Fatalf("OTELLoggerMock.Emit mock is already set by Set")
	}

	if mmEmit.defaultExpectation == nil {
		mmEmit.defaultExpectation = &OTELLoggerMockEmitExpectation{}
	}

	if mmEmit.defaultExpectation.params != nil {
		mmEmit.mock.t.Fatalf("OTELLoggerMock.Emit mock is already set by Expect")
	}

	if mmEmit.defaultExpectation.paramPtrs == nil {
		mmEmit.defaultExpectation.paramPtrs = &OTELLoggerMockEmitParamPtrs{}
	}
	mmEmit.defaultExpectation.paramPtrs.record = &record
	mmEmit.defaultExpectation.expectationOrigins.originRecord = minimock.CallerInfo(1)

	return mmEmit
}

// Inspect accepts an inspector function that has same arguments as the OTELLogger.Emit
func (mmEmit *mOTELLoggerMockEmit) Inspect(f func(ctx context.Context, record log.Record)) *mOTELLoggerMockEmit {
	if mmEmit.mock.inspectFuncEmit != nil {
		mmEmit.mock.t.Fatalf("Inspect function is already set for OTELLoggerMock.Emit")
	}

	mmEmit.mock.inspectFuncEmit = f

	return mmEmit
}

// Return sets up results that will be returned by OTELLogger.Emit
func (mmEmit *mOTELLoggerMockEmit) Return() *OTELLoggerMock {
	if mmEmit.mock.funcEmit != nil {
		mmEmit.mock.t.Fatalf("OTELLoggerMock.Emit mock is already set by Set")
	}

	if mmEmit.defaultExpectation == nil {
		mmEmit.defaultExpectation = &OTELLoggerMockEmitExpectation{mock: mmEmit.mock}
	}

	mmEmit.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmEmit.mock
}

// Set uses given function f to mock the OTELLogger.Emit method
func (mmEmit *mOTELLoggerMockEmit) Set(f func(ctx context.Context, record log.Record)) *OTELLoggerMock {
	if mmEmit.defaultExpectation != nil {
		mmEmit.mock.t.Fatalf("Default expectation is already set for the OTELLogger.Emit method")
	}

	if len(mmEmit.expectations) > 0 {
		mmEmit.mock.t.Fatalf("Some expectations are already set for the OTELLogger.Emit method")
	}

	mmEmit.mock.funcEmit = f
	mmEmit.mock.funcEmitOrigin = minimock.CallerInfo(1)
	return mmEmit.mock
}

// Times sets number of times OTELLogger.Emit should be invoked
func (mmEmit *mOTELLoggerMockEmit) Times(n uint64) *mOTELLoggerMockEmit {
	if n == 0 {
		mmEmit.mock.t.Fatalf("Times of OTELLoggerMock.Emit mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmEmit.expectedInvocations, n)
	mmEmit.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmEmit
}

func (mmEmit *mOTELLoggerMockEmit) invocationsDone() bool {
	if len(mmEmit.expectations) == 0 && mmEmit.defaultExpectation == nil && mmEmit.mock.funcEmit == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmEmit.mock.afterEmitCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmEmit.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Emit implements OTELLogger
func (mmEmit *OTELLoggerMock) Emit(ctx context.Context, record log.Record) {
	mm_atomic.AddUint64(&mmEmit.beforeEmitCounter, 1)
	defer mm_atomic.AddUint64(&mmEmit.afterEmitCounter, 1)

	mmEmit.t.Helper()

	if mmEmit.inspectFuncEmit != nil {
		mmEmit.inspectFuncEmit(ctx, record)
	}

	mm_params := OTELLoggerMockEmitParams{ctx, record}

	// Record call args
	mmEmit.EmitMock.mutex.Lock()
	mmEmit.EmitMock.callArgs = append(mmEmit.EmitMock.callArgs, &mm_params)
	mmEmit.EmitMock.mutex.Unlock()

	for _, e := range mmEmit.EmitMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmEmit.EmitMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmEmit.EmitMock.defaultExpectation.Counter, 1)
		mm_want := mmEmit.EmitMock.defaultExpectation.params
		mm_want_ptrs := mmEmit.EmitMock.defaultExpectation.paramPtrs

		mm_got := OTELLoggerMockEmitParams{ctx, record}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmEmit.t.Errorf("OTELLoggerMock.Emit got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmEmit.EmitMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.record != nil && !minimock.Equal(*mm_want_ptrs.record, mm_got.record) {
				mmEmit.t.Errorf("OTELLoggerMock.Emit got unexpected parameter record, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmEmit.EmitMock.defaultExpectation.expectationOrigins.originRecord, *mm_want_ptrs.record, mm_got.record, minimock.Diff(*mm_want_ptrs.record, mm_got.record))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmEmit.t.Errorf("OTELLoggerMock.Emit got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmEmit.EmitMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmEmit.funcEmit != nil {
		mmEmit.funcEmit(ctx, record)
		return
	}
	mmEmit.t.Fatalf("Unexpected call to OTELLoggerMock.Emit. %v %v", ctx, record)

}

// EmitAfterCounter returns a count of finished OTELLoggerMock.Emit invocations
func (mmEmit *OTELLoggerMock) EmitAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmEmit.afterEmitCounter)
}

// EmitBeforeCounter returns a count of OTELLoggerMock.Emit invocations
func (mmEmit *OTELLoggerMock) EmitBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmEmit.beforeEmitCounter)
}

// Calls returns a list of arguments used in each call to OTELLoggerMock.Emit.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmEmit *mOTELLoggerMockEmit) Calls() []*OTELLoggerMockEmitParams {
	mmEmit.mutex.RLock()

	argCopy := make([]*OTELLoggerMockEmitParams, len(mmEmit.callArgs))
	copy(argCopy, mmEmit.callArgs)

	mmEmit.mutex.RUnlock()

	return argCopy
}

// MinimockEmitDone returns true if the count of the Emit invocations corresponds
// the number of defined expectations
func (m *OTELLoggerMock) MinimockEmitDone() bool {
	if m.EmitMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.EmitMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.EmitMock.invocationsDone()
}

// MinimockEmitInspect logs each unmet expectation
func (m *OTELLoggerMock) MinimockEmitInspect() {
	for _, e := range m.EmitMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OTELLoggerMock.Emit at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterEmitCounter := mm_atomic.LoadUint64(&m.afterEmitCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.EmitMock.defaultExpectation != nil && afterEmitCounter < 1 {
		if m.EmitMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to OTELLoggerMock.Emit at\n%s", m.EmitMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to OTELLoggerMock.Emit at\n%s with params: %#v", m.EmitMock.defaultExpectation.expectationOrigins.origin, *m.EmitMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcEmit != nil && afterEmitCounter < 1 {
		m.t.Errorf("Expected call to OTELLoggerMock.Emit at\n%s", m.funcEmitOrigin)
	}

	if !m.EmitMock.invocationsDone() && afterEmitCounter > 0 {
		m.t.Errorf("Expected %d calls to OTELLoggerMock.Emit at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.EmitMock.expectedInvocations), m.EmitMock.expectedInvocationsOrigin, afterEmitCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OTELLoggerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockEmitInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OTELLoggerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OTELLoggerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockEmitDone()
}
